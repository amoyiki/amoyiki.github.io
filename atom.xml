<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>四畳半神话大系</title>
  <subtitle>圈地自萌</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://amoyiki.com/"/>
  <updated>2017-02-13T06:50:38.033Z</updated>
  <id>http://amoyiki.com/</id>
  
  <author>
    <name>amoyiki</name>
    <email>amoyiki#gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrapy学习（四） 爬取微博数据</title>
    <link href="http://amoyiki.com/2017/02/13/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89-%E7%88%AC%E5%8F%96%E5%BE%AE%E5%8D%9A%E6%95%B0%E6%8D%AE/"/>
    <id>http://amoyiki.com/2017/02/13/Scrapy学习（四）-爬取微博数据/</id>
    <published>2017-02-13T06:48:00.000Z</published>
    <updated>2017-02-13T06:50:38.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p><a href="https://segmentfault.com/a/1190000008253696?_ea=1616863" target="_blank" rel="external">Scrapy学习（三） 爬取豆瓣图书信息</a></p>
</blockquote>
<p>接上篇之后。这次来爬取需要登录才能访问的微博。<br>爬虫目标是获取用户的微博数、关注数、粉丝数。为建立用户关系图(尚未实现)做数据储备<br><a id="more"></a></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>安装第三方库<code>requests</code>和<code>pymongo</code></li>
<li>安装MongoDB</li>
<li>创建一个weibo爬虫项目</li>
</ul>
<p>如何创建Scrapy项目之前文章都已经提到了，直接进入主题。</p>
<h2 id="创建Items"><a href="#创建Items" class="headerlink" title="创建Items"></a>创建Items</h2><p>Item数据这部分我只需要个人信息，微博数，关注数、分数数这些基本信息就行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    账号的微博数、关注数、粉丝数及详情</span><br><span class="line">    """</span></span><br><span class="line">    _id = Field()</span><br><span class="line">    nick_name = Field()</span><br><span class="line">    profile_pic = Field()</span><br><span class="line">    tweet_stats = Field()</span><br><span class="line">    following_stats = Field()</span><br><span class="line">    follower_stats = Field()</span><br><span class="line">    sex = Field()</span><br><span class="line">    location = Field()</span><br><span class="line">    birthday = Field()</span><br><span class="line">    bio = Field()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FollowingItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    关注的微博账号</span><br><span class="line">    """</span></span><br><span class="line">    _id = Field()</span><br><span class="line">    relationship = Field()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FollowedItem</span><span class="params">(Item)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    粉丝的微博账号</span><br><span class="line">    """</span></span><br><span class="line">    _id = Field()</span><br><span class="line">    relationship = Field()</span><br></pre></td></tr></table></figure></p>
<h2 id="编写Spider"><a href="#编写Spider" class="headerlink" title="编写Spider"></a>编写Spider</h2><p>为了方便爬虫，我们选择登陆的入口是手机版的微博<code>http://weibo.cn/</code>。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oi6538cys.bkt.clouddn.com/snipaste20170213_132630.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>其中微博的uid可以通过访问用户资料页或者从关注的<code>href</code>属性中获取</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboSpiderSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"weibo_spider"</span></span><br><span class="line">    allowed_domains = [<span class="string">"weibo.cn"</span>]</span><br><span class="line">    url = <span class="string">"http://weibo.cn/"</span></span><br><span class="line">    start_urls = [<span class="string">'2634877355'</span>,...] <span class="comment"># 爬取入口微博ID</span></span><br><span class="line">    task_set = set(start_urls) <span class="comment"># 待爬取集合</span></span><br><span class="line">    tasked_set = set() <span class="comment"># 已爬取集合</span></span><br><span class="line">    ...   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> len(self.task_set) &gt; <span class="number">0</span> :</span><br><span class="line">            _id = self.task_set.pop()</span><br><span class="line">            <span class="keyword">if</span> _id <span class="keyword">in</span> self.tasked_set:</span><br><span class="line">                <span class="keyword">raise</span> CloseSpider(reason=<span class="string">"已存在该数据 %s "</span>% (_id) )</span><br><span class="line">            self.tasked_set.add(_id)</span><br><span class="line">            info_url = self.url + _id</span><br><span class="line">            info_item = ProfileItem()</span><br><span class="line">            following_url = info_url + <span class="string">"/follow"</span></span><br><span class="line">            following_item = FollowingItem()</span><br><span class="line">            following_item[<span class="string">"_id"</span>] = _id</span><br><span class="line">            following_item[<span class="string">"relationship"</span>] = []</span><br><span class="line">            follower_url = info_url + <span class="string">"/fans"</span></span><br><span class="line">            follower_item = FollowedItem()</span><br><span class="line">            follower_item[<span class="string">"_id"</span>] = _id</span><br><span class="line">            follower_item[<span class="string">"relationship"</span>] = []</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(info_url, meta=&#123;<span class="string">"item"</span>:info_item&#125;, callback=self.account_parse)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(following_url, meta=&#123;<span class="string">"item"</span>:following_item&#125;, callback=self.relationship_parse)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(follower_url, meta=&#123;<span class="string">"item"</span>:follower_item&#125;, callback=self.relationship_parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">account_parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">"item"</span>]</span><br><span class="line">        sel = scrapy.Selector(response)</span><br><span class="line">        profile_url = sel.xpath(<span class="string">"//div[@class='ut']/a/@href"</span>).extract()[<span class="number">1</span>]</span><br><span class="line">        counts = sel.xpath(<span class="string">"//div[@class='u']/div[@class='tip2']"</span>).extract_first()</span><br><span class="line">        item[<span class="string">'_id'</span>] = re.findall(<span class="string">u'^/(\d+)/info'</span>,profile_url)[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'tweet_stats'</span>] = re.findall(<span class="string">u'微博\[(\d+)\]'</span>, counts)[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'following_stats'</span>] = re.findall(<span class="string">u'关注\[(\d+)\]'</span>, counts)[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">'follower_stats'</span>] = re.findall(<span class="string">u'粉丝\[(\d+)\]'</span>, counts)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> int(item[<span class="string">'tweet_stats'</span>]) &lt; <span class="number">4500</span> <span class="keyword">and</span> int(item[<span class="string">'following_stats'</span>]) &gt; <span class="number">1000</span> <span class="keyword">and</span> int(item[<span class="string">'follower_stats'</span>]) &lt; <span class="number">500</span>:</span><br><span class="line">            <span class="keyword">raise</span> CloseSpider(<span class="string">"僵尸粉"</span>)</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(<span class="string">"http://weibo.cn"</span>+profile_url, meta=&#123;<span class="string">"item"</span>: item&#125;,callback=self.profile_parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profile_parse</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">'item'</span>]</span><br><span class="line">        sel = scrapy.Selector(response)</span><br><span class="line">        info = sel.xpath(<span class="string">"//div[@class='tip']/following-sibling::div[@class='c']"</span>).extract_first()</span><br><span class="line">        item[<span class="string">"profile_pic"</span>] = sel.xpath(<span class="string">"//div[@class='c']/img/@src"</span>).extract_first()</span><br><span class="line">        item[<span class="string">"nick_name"</span>] = re.findall(<span class="string">u'昵称:(.*?)&lt;br&gt;'</span>,info)[<span class="number">0</span>]</span><br><span class="line">        item[<span class="string">"sex"</span>] = re.findall(<span class="string">u'性别:(.*?)&lt;br&gt;'</span>,info) <span class="keyword">and</span> re.findall(<span class="string">u'性别:(.*?)&lt;br&gt;'</span>,info)[<span class="number">0</span>] <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">        item[<span class="string">"location"</span>] = re.findall(<span class="string">u'地区:(.*?)&lt;br&gt;'</span>,info) <span class="keyword">and</span> re.findall(<span class="string">u'地区:(.*?)&lt;br&gt;'</span>,info)[<span class="number">0</span>] <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">        item[<span class="string">"birthday"</span>] = re.findall(<span class="string">u'生日:(.*?)&lt;br&gt;'</span>,info) <span class="keyword">and</span> re.findall(<span class="string">u'生日:(.*?)&lt;br&gt;'</span>,info)[<span class="number">0</span>] <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">        item[<span class="string">"bio"</span>] = re.findall(<span class="string">u'简介:(.*?)&lt;br&gt;'</span>,info) <span class="keyword">and</span> re.findall(<span class="string">u'简介:(.*?)&lt;br&gt;'</span>,info)[<span class="number">0</span>] <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">relationship_parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = response.meta[<span class="string">"item"</span>]</span><br><span class="line">        sel = scrapy.Selector(response)</span><br><span class="line">        uids = sel.xpath(<span class="string">"//table/tr/td[last()]/a[last()]/@href"</span>).extract()</span><br><span class="line">        new_uids = []</span><br><span class="line">        <span class="keyword">for</span> uid <span class="keyword">in</span> uids:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"uid"</span> <span class="keyword">in</span> uid:</span><br><span class="line">                new_uids.append(re.findall(<span class="string">'uid=(\d+)&amp;'</span>,uid)[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    new_uids.append(re.findall(<span class="string">'/(\d+)'</span>, uid)[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    print(<span class="string">'--------'</span>,uid)</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        item[<span class="string">"relationship"</span>].extend(new_uids)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> new_uids:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> self.tasked_set:</span><br><span class="line">                self.task_set.add(i)</span><br><span class="line">        next_page = sel.xpath(<span class="string">"//*[@id='pagelist']/form/div/a[text()='下页']/@href"</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(<span class="string">"http://weibo.cn"</span>+next_page, meta=&#123;<span class="string">"item"</span>: item&#125;,callback=self.relationship_parse)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>
<p>代码中值得注意的地方有几个。</p>
<h3 id="start-url"><a href="#start-url" class="headerlink" title="start_url"></a>start_url</h3><p>这里我们填写的是微博的uid，有的用户有自定义域名（如上图），要访问后才能得到真正的uid<br><code>start_url</code> 填写的初始种子数要在10个以上。这是为了确保后面我们爬取到的新的种子能够加入到待爬取的队列中。10个以上的规定是从<a href="https://doc.scrapy.org/en/latest/topics/settings.html#reactor-threadpool-maxsize" target="_blank" rel="external">Scrapy文档</a>中查得的</p>
<blockquote>
<p>####REACTOR_THREADPOOL_MAXSIZE###<br>Default: <code>10</code><br>线程数是<code>Twisted</code>线程池的默认大小(The maximum limit for Twisted Reactor thread pool size.)</p>
</blockquote>
<h3 id="CloseSpider"><a href="#CloseSpider" class="headerlink" title="CloseSpider"></a>CloseSpider</h3><p>当遇到不需要的继续爬取的连接时(如已经爬取过的链接，定义的僵尸粉链接等等)，就可以用<a href="https://doc.scrapy.org/en/latest/topics/exceptions.html#closespider" target="_blank" rel="external">CloseSpider</a>关闭当前爬虫线程</p>
<h2 id="编写middlewares"><a href="#编写middlewares" class="headerlink" title="编写middlewares"></a>编写middlewares</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CookiesMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" 换Cookie """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        cookie = random.choice(cookies)</span><br><span class="line">        request.cookies = cookie</span><br></pre></td></tr></table></figure>
<h2 id="编写cookie的获取方法"><a href="#编写cookie的获取方法" class="headerlink" title="编写cookie的获取方法"></a>编写cookie的获取方法</h2><p>这里我原本是想用手机版的微博去模拟登陆的，奈何验证码是在是太难搞了。所以我直接用网上有人编写好的登陆网页版微博的代码<a href="https://github.com/LiuXingMing/SinaSpider/blob/master/Sina_spider1/Sina_spider1/cookies.py" target="_blank" rel="external">SinaSpider</a> 这位写的很好，有兴趣的可以去看看。其中还有另一位写了<a href="https://github.com/xchaoinfo/fuck-login/blob/master/007%20weibo.com/weibo.com.py" target="_blank" rel="external">模拟登陆（带验证码）</a> 经测试可用。只不过我还没想好怎么嵌入到我的项目中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">myWeiBo = [</span><br><span class="line">    &#123;<span class="string">'no'</span>: <span class="string">'xx@sina.com'</span>, <span class="string">'psw'</span>: <span class="string">'xx'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'no'</span>: <span class="string">'xx@qq.com'</span>, <span class="string">'psw'</span>: <span class="string">'xx'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCookies</span><span class="params">(weibo)</span>:</span></span><br><span class="line">    <span class="string">""" 获取Cookies """</span></span><br><span class="line">    cookies = []</span><br><span class="line">    loginURL = <span class="string">r'https://login.sina.com.cn/sso/login.php?client=ssologin.js(v1.4.15)'</span></span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> weibo:</span><br><span class="line">        account = elem[<span class="string">'no'</span>]</span><br><span class="line">        password = elem[<span class="string">'psw'</span>]</span><br><span class="line">        username = base64.b64encode(account.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        postData = &#123;</span><br><span class="line">            <span class="string">"entry"</span>: <span class="string">"sso"</span>,</span><br><span class="line">            <span class="string">"gateway"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"from"</span>: <span class="string">"null"</span>,</span><br><span class="line">            <span class="string">"savestate"</span>: <span class="string">"30"</span>,</span><br><span class="line">            <span class="string">"useticket"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="string">"pagerefer"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"vsnf"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"su"</span>: username,</span><br><span class="line">            <span class="string">"service"</span>: <span class="string">"sso"</span>,</span><br><span class="line">            <span class="string">"sp"</span>: password,</span><br><span class="line">            <span class="string">"sr"</span>: <span class="string">"1440*900"</span>,</span><br><span class="line">            <span class="string">"encoding"</span>: <span class="string">"UTF-8"</span>,</span><br><span class="line">            <span class="string">"cdult"</span>: <span class="string">"3"</span>,</span><br><span class="line">            <span class="string">"domain"</span>: <span class="string">"sina.com.cn"</span>,</span><br><span class="line">            <span class="string">"prelt"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="string">"returntype"</span>: <span class="string">"TEXT"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        session = requests.Session()</span><br><span class="line">        r = session.post(loginURL, data=postData)</span><br><span class="line">        jsonStr = r.content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">        info = json.loads(jsonStr)</span><br><span class="line">        <span class="keyword">if</span> info[<span class="string">"retcode"</span>] == <span class="string">"0"</span>:</span><br><span class="line">            print(<span class="string">"Get Cookie Success!( Account:%s )"</span> % account)</span><br><span class="line">            cookie = session.cookies.get_dict()</span><br><span class="line">            cookies.append(cookie)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Failed!( Reason:%s )"</span> % info[<span class="string">"reason"</span>].encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line">cookies = getCookies(myWeiBo)</span><br></pre></td></tr></table></figure></p>
<p>登陆-反爬虫的这部分应该是整个项目中最难的地方了。<del>好多地方我都还不太懂。以后有空在研究</del></p>
<h2 id="编写pipelines"><a href="#编写pipelines" class="headerlink" title="编写pipelines"></a>编写pipelines</h2><p>这边只需要主要什么类型的Item存到那张表里就行了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        connection = MongoClient(</span><br><span class="line">            host=settings[<span class="string">'MONGODB_SERVER'</span>],</span><br><span class="line">            port=settings[<span class="string">'MONGODB_PORT'</span>]</span><br><span class="line">        )</span><br><span class="line">        db = connection[settings[<span class="string">'MONGODB_DB'</span>]]</span><br><span class="line">        self.info = db[settings[<span class="string">'INFO'</span>]]</span><br><span class="line">        self.following = db[settings[<span class="string">'FOLLOWING'</span>]]</span><br><span class="line">        self.followed = db[settings[<span class="string">'FOLLOWED'</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> isinstance(item, ProfileItem):</span><br><span class="line">            self.info.insert(dict(item))</span><br><span class="line">        <span class="keyword">elif</span> isinstance(item, FollowingItem):</span><br><span class="line">            self.following.insert(dict(item))</span><br><span class="line">        <span class="keyword">elif</span> isinstance(item, FollowedItem):</span><br><span class="line">            self.followed.insert(dict(item))</span><br><span class="line">        log.msg(<span class="string">"Weibo  added to MongoDB database!"</span>,</span><br><span class="line">                level=log.DEBUG, spider=spider)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></p>
<p>运行一下程序，就能看到MongoDB中有了我们要的数据了<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oi6538cys.bkt.clouddn.com/snipaste20170213_141218.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><code>settings</code>中的<code>DOWNLOAD_DELAY</code>设置5才能防止被微博BAN掉</li>
<li>尝试在利用cookies登陆失败时使用模拟登陆，但是效果很不理想</li>
<li>尝试用代理IP池反爬虫，但是尝试失败<del>主要是不太会</del></li>
<li>未来将利用D3.js将爬到的数据绘制出来(<del>或许吧</del>)</li>
</ul>
<p>项目地址：<a href="https://github.com/amoyiki/weibo_spider" target="_blank" rel="external">weibo_spider</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008253696?_ea=1616863&quot;&gt;Scrapy学习（三） 爬取豆瓣图书信息&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接上篇之后。这次来爬取需要登录才能访问的微博。&lt;br&gt;爬虫目标是获取用户的微博数、关注数、粉丝数。为建立用户关系图(尚未实现)做数据储备&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://amoyiki.com/categories/Python/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scrapy" scheme="http://amoyiki.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy学习（三） 爬取豆瓣图书信息</title>
    <link href="http://amoyiki.com/2017/02/04/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89-%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E5%9B%BE%E4%B9%A6%E4%BF%A1%E6%81%AF/"/>
    <id>http://amoyiki.com/2017/02/04/Scrapy学习（三）-爬取豆瓣图书信息/</id>
    <published>2017-02-04T07:07:08.000Z</published>
    <updated>2017-02-05T02:07:14.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<ul>
<li><a href="http://www.amoyiki.com/2017/01/29/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%AE%89%E8%A3%85/" target="_blank" rel="external">Scrapy学习（一） 安装</a></li>
<li><a href="http://www.amoyiki.com/2017/01/30/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%85%A5%E9%97%A8/" target="_blank" rel="external">Scrapy学习（二） 入门</a></li>
</ul>
</blockquote>
<p>有了前两篇的基础，就可以开始互联网上爬取我们感兴趣的信息了。因为暂时还没有学到如何模拟登陆，所以我就先抓像豆瓣这样不需要登陆的网站上的内容。<br><a id="more"></a><br>我的开发环境是 Win7 + PyChram + Python3.5 + MongoDB<br>爬虫的目标是豆瓣的日本文学标签下的所有书籍基本信息</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><blockquote>
<p>scrapy startproject douban</p>
</blockquote>
<p>接着移动到<code>douban</code>目录下</p>
<blockquote>
<p>scrapy genspider book book.douban.com</p>
</blockquote>
<p>在spider目录下生成相应的BookSpider模板</p>
<h3 id="编写Item"><a href="#编写Item" class="headerlink" title="编写Item"></a>编写Item</h3><p>在items.py中编写我们需要的数据模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    book_name = scrapy.Field()</span><br><span class="line">    book_star = scrapy.Field()</span><br><span class="line">    book_pl = scrapy.Field()</span><br><span class="line">    book_author = scrapy.Field()</span><br><span class="line">    book_publish = scrapy.Field()</span><br><span class="line">    book_date = scrapy.Field()</span><br><span class="line">    book_price = scrapy.Field()</span><br></pre></td></tr></table></figure></p>
<h3 id="编写Spider"><a href="#编写Spider" class="headerlink" title="编写Spider"></a>编写Spider</h3><p>访问豆瓣的<a href="https://book.douban.com/tag/%E6%97%A5%E6%9C%AC%E6%96%87%E5%AD%A6?start=0" target="_blank" rel="external">日本文学</a>标签,将url的值写到<code>start_urls</code>中。接着在Chrome的帮助下，可以看到每本图书是在<code>ul#subject-list &gt; li.subject-item</code><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oi6538cys.bkt.clouddn.com/00douban.png" alt="日本文学" title="">
                </div>
                <div class="image-caption">日本文学</div>
            </figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        sel = Selector(response)</span><br><span class="line">        book_list = sel.css(<span class="string">'#subject_list &gt; ul &gt; li'</span>)</span><br><span class="line">        <span class="keyword">for</span> book <span class="keyword">in</span> book_list:</span><br><span class="line">            item = BookItem()</span><br><span class="line">            item[<span class="string">'book_name'</span>] = book.xpath(<span class="string">'div[@class="info"]/h2/a/text()'</span>).extract()[<span class="number">0</span>].strip()</span><br><span class="line">            item[<span class="string">'book_star'</span>] = book.xpath(<span class="string">"div[@class='info']/div[2]/span[@class='rating_nums']/text()"</span>).extract()[</span><br><span class="line">                <span class="number">0</span>].strip()</span><br><span class="line">            item[<span class="string">'book_pl'</span>] = book.xpath(<span class="string">"div[@class='info']/div[2]/span[@class='pl']/text()"</span>).extract()[<span class="number">0</span>].strip()</span><br><span class="line">            pub = book.xpath(<span class="string">'div[@class="info"]/div[@class="pub"]/text()'</span>).extract()[<span class="number">0</span>].strip().split(<span class="string">'/'</span>)</span><br><span class="line">            item[<span class="string">'book_price'</span>] = pub.pop()</span><br><span class="line">            item[<span class="string">'book_date'</span>] = pub.pop()</span><br><span class="line">            item[<span class="string">'book_publish'</span>] = pub.pop()</span><br><span class="line">            item[<span class="string">'book_author'</span>] = <span class="string">'/'</span>.join(pub)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure></p>
<p>测试一下代码是否有问题</p>
<blockquote>
<p>scrapy crawl book -o items.json</p>
</blockquote>
<p>奇怪的发现，items.json内并没有数据，后头看控制台中的DEBUG信息</p>
<blockquote>
<p>2017-02-04 16:15:38 [scrapy.core.engine] INFO: Spider opened<br>2017-02-04 16:15:38 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)<br>2017-02-04 16:15:38 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023<br>2017-02-04 16:15:39 [scrapy.core.engine] DEBUG: Crawled (403) <get https:="" book.douban.com="" robots.txt=""> (referer: None)<br>2017-02-04 16:15:39 [scrapy.core.engine] DEBUG: Crawled (403) <get https:="" book.douban.com="" tag="" %e6%97%a5%e6%9c%ac%e6%96%87%e5%ad%a6?start="0"> (referer: None)</get></get></p>
</blockquote>
<p>爬取网页时状态码是403。这是因为服务器判断出爬虫程序，拒绝我们访问。<br>我们可以在settings中设定<code>USER_AGENT</code>的值，伪装成浏览器访问页面。</p>
<blockquote>
<p>USER_AGENT = “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)”</p>
</blockquote>
<p>再试一次，就发现items.json有值了。但仔细只有第一页的数据，如果我们想要爬取所有的数据，就需要爬完当前页后自动获得下一页的url，以此类推爬完所有数据。<br>所以我们对spider进行改造。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    sel = Selector(response)</span><br><span class="line">    book_list = sel.css(<span class="string">'#subject_list &gt; ul &gt; li'</span>)</span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> book_list:</span><br><span class="line">        item = BookItem()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            item[<span class="string">'book_name'</span>] = book.xpath(<span class="string">'div[@class="info"]/h2/a/text()'</span>).extract()[<span class="number">0</span>].strip()</span><br><span class="line">            item[<span class="string">'book_star'</span>] = book.xpath(<span class="string">"div[@class='info']/div[2]/span[@class='rating_nums']/text()"</span>).extract()[<span class="number">0</span>].strip()</span><br><span class="line">            item[<span class="string">'book_pl'</span>] = book.xpath(<span class="string">"div[@class='info']/div[2]/span[@class='pl']/text()"</span>).extract()[<span class="number">0</span>].strip()</span><br><span class="line">            pub = book.xpath(<span class="string">'div[@class="info"]/div[@class="pub"]/text()'</span>).extract()[<span class="number">0</span>].strip().split(<span class="string">'/'</span>)</span><br><span class="line">            item[<span class="string">'book_price'</span>] = pub.pop()</span><br><span class="line">            item[<span class="string">'book_date'</span>] = pub.pop()</span><br><span class="line">            item[<span class="string">'book_publish'</span>] = pub.pop()</span><br><span class="line">            item[<span class="string">'book_author'</span>] = <span class="string">'/'</span>.join(pub)</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    nextPage = sel.xpath(<span class="string">'//div[@id="subject_list"]/div[@class="paginator"]/span[@class="next"]/a/@href'</span>).extract()[<span class="number">0</span>].strip()</span><br><span class="line">    <span class="keyword">if</span> nextPage:</span><br><span class="line">        next_url = <span class="string">'https://book.douban.com'</span>+nextPage</span><br><span class="line">        <span class="keyword">yield</span> scrapy.http.Request(next_url,callback=self.parse)</span><br></pre></td></tr></table></figure></p>
<p>其中<code>scrapy.http.Request</code>会回调parse函数，用try…catch是因为豆瓣图书并不是格式一致的。遇到有问题的数据，就抛弃不用。</p>
<h3 id="突破反爬虫"><a href="#突破反爬虫" class="headerlink" title="突破反爬虫"></a>突破反爬虫</h3><p>一般来说，如果爬虫速度过快。会导致网站拒绝我们的访问，所以我们需要在settings设置爬虫的间隔时间，并关掉COOKIES</p>
<blockquote>
<p>DOWNLOAD_DELAY = 2<br>COOKIES_ENABLED = False</p>
</blockquote>
<p>或者，我们可以设置不同的浏览器UA或者IP地址来回避网站的屏蔽<br>下面用更改UA来作为例子。<br>在middlewares.py,编写一个随机替换UA的中间件，每个request都会经过middleware。<br>其中<code>process_request</code>，返回<code>None</code>，Scrapy将继续到其他的middleware进行处理。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,agents)</span>:</span></span><br><span class="line">        self.agents = agents</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls,crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(crawler.settings.getlist(<span class="string">'USER_AGENTS'</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self,request,spider)</span>:</span></span><br><span class="line">        request.headers.setdefault(<span class="string">'User-Agent'</span>,random.choice(self.agents))</span><br></pre></td></tr></table></figure></p>
<p>接着道<code>settings</code>中设置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">'douban.middlewares.RandomUserAgent': 1,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">USER_AGENTS = [</span><br><span class="line">    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",</span><br><span class="line">    "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)",</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>再次运行程序，显然速度快了不少。</p>
<h3 id="保存到MongoDB"><a href="#保存到MongoDB" class="headerlink" title="保存到MongoDB"></a>保存到MongoDB</h3><p>接下来我们要将数据保存到数据库做持久化处理(这里用MongoDB举例，保存到其他数据库同理)。<br>这部分处理是写在<code>pipelines</code>中。在此之前我们还要先安装连接数据库的驱动。</p>
<blockquote>
<p>pip install pymongo</p>
</blockquote>
<p>我们在<code>settings</code>写下配置<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MONGODB configure</span></span><br><span class="line"><span class="attr">MONGODB_SERVER</span> = <span class="string">'localhost'</span></span><br><span class="line"><span class="attr">MONGODB_PORT</span> = <span class="number">27017</span></span><br><span class="line"><span class="attr">MONGODB_DB</span> = <span class="string">'douban'</span></span><br><span class="line"><span class="attr">MONGODB_COLLECTION</span> = <span class="string">"book"</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        connection = MongoClient(</span><br><span class="line">            host=settings[<span class="string">'MONGODB_SERVER'</span>],</span><br><span class="line">            port=settings[<span class="string">'MONGODB_PORT'</span>]</span><br><span class="line">        )</span><br><span class="line">        db = connection[settings[<span class="string">'MONGODB_DB'</span>]]</span><br><span class="line">        self.collection = db[settings[<span class="string">'MONGODB_COLLECTION'</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.collection.insert(dict(item))</span><br><span class="line">        log.msg(<span class="string">"Book  added to MongoDB database!"</span>,</span><br><span class="line">                level=log.DEBUG, spider=spider)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>将运行项目的时候控制台中输出的DEBUG信息保存到log文件中。只需要在<code>settings</code>中设置</p>
<blockquote>
<p>LOG_FILE = “logs/book.log”</p>
</blockquote>
<p>项目代码地址：<a href="https://github.com/amoyiki/LearnedAndProTest/tree/master/douban" target="_blank" rel="external">豆瓣图书爬虫</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amoyiki.com/2017/01/29/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%AE%89%E8%A3%85/&quot;&gt;Scrapy学习（一） 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amoyiki.com/2017/01/30/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%85%A5%E9%97%A8/&quot;&gt;Scrapy学习（二） 入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了前两篇的基础，就可以开始互联网上爬取我们感兴趣的信息了。因为暂时还没有学到如何模拟登陆，所以我就先抓像豆瓣这样不需要登陆的网站上的内容。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://amoyiki.com/categories/Python/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scrapy" scheme="http://amoyiki.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy学习（二） 入门</title>
    <link href="http://amoyiki.com/2017/01/30/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%85%A5%E9%97%A8/"/>
    <id>http://amoyiki.com/2017/01/30/Scrapy学习（二）-入门/</id>
    <published>2017-01-30T14:12:13.000Z</published>
    <updated>2017-02-04T07:08:23.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>接上篇<a href="http://www.amoyiki.com/2017/01/29/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%AE%89%E8%A3%85/" target="_blank" rel="external">Scrapy学习（一） 安装</a>，安装后，我们利用一个简单的例子来熟悉如何使用Scrapy创建一个爬虫项目。<br><a id="more"></a></p>
<h3 id="创建一个Scrapy项目"><a href="#创建一个Scrapy项目" class="headerlink" title="创建一个Scrapy项目"></a>创建一个Scrapy项目</h3><p>在已配置好的环境下输入</p>
<blockquote>
<p>scrapy startproject dmoz</p>
</blockquote>
<p>系统将在当前目录生成一个myproject的项目文件。该文件的目录结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dmoz/    # 项目根目录</span><br><span class="line">   scrapy.cfg    # 项目配置文件</span><br><span class="line">   dmoz/    # 项目模块</span><br><span class="line">       __init__.py</span><br><span class="line">        items.py    # 项目item文件，有点类似Django中的模型</span><br><span class="line">        pipelines.py    # 项目pipelines文件，负责数据的操作和存储</span><br><span class="line">        settings.py    # 项目的设置文件.</span><br><span class="line">        spiders/    # 项目spider目录，编写的爬虫脚步都放此目录下</span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure></p>
<p>接下来我们以<code>dmoz.org</code>为爬取目标。开始变现简单的爬虫项目。</p>
<h3 id="编写items"><a href="#编写items" class="headerlink" title="编写items"></a>编写items</h3><p>在items.py中编写我们所需的数据的模型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.item <span class="keyword">import</span> Item, Field</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Website</span><span class="params">(Item)</span>:</span></span><br><span class="line">    name = Field()</span><br><span class="line">    description = Field()</span><br><span class="line">    url = Field()</span><br></pre></td></tr></table></figure></p>
<p>这个模型用来填充我们爬取的数据</p>
<h3 id="编写Spider"><a href="#编写Spider" class="headerlink" title="编写Spider"></a>编写Spider</h3><p>在spiders文件下新建爬虫文件。这部分才是业务的核心部分。<br>首先创建一个继承<code>scrapy.spiders.Spider</code>的类<br>并且定义如下三个属性</p>
<ul>
<li>name 标识spider</li>
<li>start_urls 启动爬虫时进行爬取的url列表，默认为空</li>
<li>parse() 每个初始的url下载后的response都会传到该方法内，在这个方法里可以对数据进行处理。 </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dirbot.items <span class="keyword">import</span> Website</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DmozSpider</span><span class="params">(Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"dmoz"</span></span><br><span class="line">    allowed_domains = [<span class="string">"dmoz.org"</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"</span>,</span><br><span class="line">        <span class="string">"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        sites = response.css(<span class="string">'#site-list-content &gt; div.site-item &gt; div.title-and-desc'</span>)</span><br><span class="line">        items = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">            item = Website()</span><br><span class="line">            item[<span class="string">'name'</span>] = site.css(</span><br><span class="line">                <span class="string">'a &gt; div.site-title::text'</span>).extract_first().strip()</span><br><span class="line">            item[<span class="string">'url'</span>] = site.xpath(</span><br><span class="line">                <span class="string">'a/@href'</span>).extract_first().strip()</span><br><span class="line">            item[<span class="string">'description'</span>] = site.css(</span><br><span class="line">                <span class="string">'div.site-descr::text'</span>).extract_first().strip()</span><br><span class="line">            items.append(item)</span><br><span class="line">        <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure>
<p>其中值得注意的是，在<code>parse</code>方法内，我们可以用Selector选择器来提取网站中我们所需的数据。提取的方式有几种。</p>
<ul>
<li>xpath() 传入xpath表达式获取节点值</li>
<li>css() 传入css表达式获取节点值</li>
<li>re() 传入正则表达式获取节点值 # 此方法本人未测试</li>
</ul>
<h3 id="运行并保存数据"><a href="#运行并保存数据" class="headerlink" title="运行并保存数据"></a>运行并保存数据</h3><p>接下来我们运行爬虫，并将爬取的数据存储到json中</p>
<blockquote>
<p>scrapy crawl dmoz -o items.json</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>在运行爬虫的过程中，我遇到了如下报错：</p>
<blockquote>
<p>KeyError: ‘Spider not found: dmoz</p>
</blockquote>
<p>这个是因为我的spider类中设置的name的值和我<code>scrapy crawl</code>运行的spider不一致导致的。</p>
<p>具体代码详见：<br><a href="https://github.com/amoyiki/LearnedAndProTest/tree/master/dirbot" target="_blank" rel="external">scrapy入门项目</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;快速入门&lt;/h2&gt;&lt;p&gt;接上篇&lt;a href=&quot;http://www.amoyiki.com/2017/01/29/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%AE%89%E8%A3%85/&quot;&gt;Scrapy学习（一） 安装&lt;/a&gt;，安装后，我们利用一个简单的例子来熟悉如何使用Scrapy创建一个爬虫项目。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://amoyiki.com/categories/Python/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scrapy" scheme="http://amoyiki.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy学习（一） 安装</title>
    <link href="http://amoyiki.com/2017/01/29/Scrapy%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%AE%89%E8%A3%85/"/>
    <id>http://amoyiki.com/2017/01/29/Scrapy学习（一）-安装/</id>
    <published>2017-01-29T09:10:11.000Z</published>
    <updated>2017-01-30T14:12:33.676Z</updated>
    
    <content type="html"><![CDATA[<p>在开篇之前，不得不吐槽一下，配置Scrapy是我<br>搞python后配置环境最久的一次了。我赶紧将四小时的配置过程写下来，以免浪费了这些宝贵的踩坑经验。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装Scrapy之前，要先安装相关的依赖模块，否则无论你是手动pip安装还是用IDE（如Pycharm自动安装都会报错</p>
<blockquote>
<p>error: Unable to find vcvarsall.bat</p>
</blockquote>
<p>因为pip无法正常的安装一些依赖，所以我们要用wheel来安装。</p>
<h3 id="安装wheel及下载-whl文件"><a href="#安装wheel及下载-whl文件" class="headerlink" title="安装wheel及下载.whl文件"></a>安装wheel及下载.whl文件</h3><blockquote>
<p>pip install wheel</p>
</blockquote>
<p>验证wheel是否正确安装<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oi6538cys.bkt.clouddn.com/wheel.png" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure><br>接下来，下载网上人家编译好的.whl文件</p>
<blockquote>
<p><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
</blockquote>
<p>用<code>Ctrl + F</code>搜索如下文件</p>
<blockquote>
<p>lxml-3.7.2-cp35-cp35m-win_amd64.whl<br>pywin32-220.1-cp35-cp35m-win_amd64.whl<br>zope.interface-4.3.3-cp35-cp35m-win_amd64.whl<br><a href="https://pypi.python.org/packages/ac/93/b4cd538d31adacd07f83013860db6b88d78755af1f3fefe68ec22d397e7b/pyOpenSSL-16.2.0-py2.py3-none-any.whl#md5=7c87cf718171f736f29d1becb4c7b7a5" target="_blank" rel="external">pyOpenSSL-16.2.0-py2.py3-none-any.whl</a><br>Twisted-16.6.0-cp35-cp35m-win_amd64.whl<br>Scrapy-1.3.0-py2.py3-none-any.whl </p>
</blockquote>
<p><strong> 注：</strong> cp后为python版本，我是64位python3.5的版本</p>
<p>最后测试一下安装是否成功</p>
<blockquote>
<p>scrapy startproject myproject</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开篇之前，不得不吐槽一下，配置Scrapy是我&lt;br&gt;搞python后配置环境最久的一次了。我赶紧将四小时的配置过程写下来，以免浪费了这些宝贵的踩坑经验。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://amoyiki.com/categories/Python/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Scrapy" scheme="http://amoyiki.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]70. Climbing Stairs</title>
    <link href="http://amoyiki.com/2017/01/20/LeetCode-70-Climbing-Stairs/"/>
    <id>http://amoyiki.com/2017/01/20/LeetCode-70-Climbing-Stairs/</id>
    <published>2017-01-20T09:28:22.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>有n步楼梯，需要n步才能到顶。每次你可以选择爬1步或2步，需要多少步你才能爬到顶。<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这个题目跟斐波那契数列一样。爬到最后一步有两种方式：</p>
<ul>
<li>f(n-1) 爬一步到顶</li>
<li>f(n-2) 爬两步到顶<br>同时爬1步只有一种方式，爬两步有两种方式。</li>
</ul>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        a,b = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            a,b = b,a+b</span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure></p>
<p><strong>java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = a+temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Climbing Stairs 这题还有一个变种题。题目如下</p>
<blockquote>
<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p>
</blockquote>
<p>代码</p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloorII</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> number &lt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> number == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * self.jumpFloorII(number<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloorII</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> number &lt;= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> number == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number):</span><br><span class="line">            a *=<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure>
<p>还有一道斐波那契数列的变种，题目如下</p>
<blockquote>
<p>用2<em>1的小矩形横、竖去覆盖更大的矩形。用n个2</em>1的小矩形无重叠的覆盖一个2<em>n的大矩形。共有多少种方法。<br>如果因为是覆盖一个2</em>n的矩阵，所以当一个2<em>1的小矩阵竖放时，大矩形的长度就会变成n-1，剩下的需要覆盖的面积就是2</em>(n-1)<br>如果是横放的话剩下需要覆盖的面积是2*(n-2) ,由此推出f(n) = f(n-1) + f(n-2)</p>
<h3 id="非递归-1"><a href="#非递归-1" class="headerlink" title="非递归"></a>非递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rectCover</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> number &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    t = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> number &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> t[number<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number):</span><br><span class="line">        t.append(t[i<span class="number">-1</span>]+t[i<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">RectCover</span><span class="params">(<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RectCover(target-<span class="number">1</span>)+RectCover(target-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;有n步楼梯，需要n步才能到顶。每次你可以选择爬1步或2步，需要多少步你才能爬到顶。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="http://amoyiki.com/2017/01/20/Docker%E5%85%A5%E9%97%A8/"/>
    <id>http://amoyiki.com/2017/01/20/Docker入门/</id>
    <published>2017-01-20T07:55:15.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode]153.Find Minimum in Rotated Sorted Array</title>
    <link href="http://amoyiki.com/2017/01/19/LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array/"/>
    <id>http://amoyiki.com/2017/01/19/LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array/</id>
    <published>2017-01-19T09:45:10.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一个顺序数组，经过一次旋转<br>{1,2,3,4,5}  —&gt; {3,4,5,1,2}<br>找出最小元素。<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>无论Java还是Python，只要排序过后就可以找出最小元素。时间复杂度O(n)<br>如Python方法min()就能直接得出数组最小值。Java也有Arrays.sort()方法排序。<br>但是如果单纯O(n)的复杂度，明显没有多大的意义。所有这道题应该用二分查找方法来返回最小值。</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMin</span><span class="params">(self,nums)</span>:</span></span><br><span class="line">        left,right = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] &lt;= nums[right]:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> nums[low]</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;一个顺序数组，经过一次旋转&lt;br&gt;{1,2,3,4,5}  —&amp;gt; {3,4,5,1,2}&lt;br&gt;找出最小元素。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[转]Java集合小抄</title>
    <link href="http://amoyiki.com/2017/01/18/%E8%BD%AC-Java%E9%9B%86%E5%90%88%E5%B0%8F%E6%8A%84/"/>
    <id>http://amoyiki.com/2017/01/18/转-Java集合小抄/</id>
    <published>2017-01-18T07:18:39.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul>
<li>以数组实现，节约空间。但是数组容量限制，超出限制会增加50%容量，用System.arraycopy()复制到新的数组。因此最好能给出数组大小的预估值。</li>
<li>默认第一次大小为10。<a id="more"></a></li>
<li>按下标访问元素，get(下标获取元素)、set(替换下标元素)的性能很高，<br>是数组的基本优势。</li>
<li>按下标插入元素，删除元素，add(i,e)、remove(i)、remove(e),则会用到System.arraycopy()来复制移动受影响的元素,性能会变差。</li>
<li>越是前面的元素，修改的时候移动的元素越多。用add(e)在尾部添加元素、删除最后一个元素不会影响性能。<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3></li>
<li>以双向链表实现，链表无容量限制，但是双向链表本身使用了更多空间，每插入一个元素都要构造一个额外的Node对象，也需要额外的指针操作。</li>
<li>按数组下标访问元素，get(i)、set(i,e),需要移动到指定Node节点(i&gt;节点个数时从尾部移动到头部)</li>
<li>插入、删除元素时修改前后节点指针即可</li>
<li>只有在两头add()、addFirst()、addLast()、removeFirst()、removeLast()才能省掉指针的移动。</li>
</ul>
<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator 支持从集合中安全删除对象，只需在Iterator上调用remove().<br>ArrayList继承了AbstractList，而AbstractList有定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * The modCount value that the iterator believes that the backing</span><br><span class="line"> * List should have.  If this expectation is violated, the iterator</span><br><span class="line"> * has detected concurrent modification.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p><code>checkForComodification</code>这个方法是检查modCount和expectedModCount的值是否是相对，如果不相等则抛出<code>ConcurrentModificationException</code>异常。<br>这是因为在多线程中操作容器时，其他线程可能已经改变了容器的内容，所以每次对容器进行操作的时候modCount都会+1。当Iterator遍历检查到modCount变化是会马上抛出异常，这是Java的<code>fail-fast</code>机制。<br>而Iterator的remove方法在操作完后让expectedModCount和modCount在此相等</p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul>
<li>以Enty[]数组实现的哈希桶数组，用Key的哈希值取模桶数组的大小可以的到数组的下标</li>
<li>插入元素时，如果两条Key落在同一个桶，称之为哈希冲突或者碰撞</li>
<li>哈希冲突JDK8之前是用的是链表法，用Entry用一个next属性实现多个Entry以单向链表的形式存放。然后遍历链表中的所有元素，逐一比较Key值</li>
<li>在JDK8后，新增链表的阈值为8，链表的元素数量超过阈值时改用红黑树来存储，提高查找速度。</li>
<li>当Entry数量达到数组的75%，数组成倍扩容，重新分配原来的Entry，扩容成本不低。<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3></li>
<li>扩展HashMap，每个Entry增加双向链表，非常占内存的数据结构<h3 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h3></li>
<li>JDK6新增并发优化的SortedMap，以SkipList结构实现，支持CAS无锁算法。</li>
</ul>
<p><strong> –待整理– </strong></p>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>方法区和堆一样，是线程共享的。在方法区中，存储每个类的信息（类名，方法信息，字段信息）、静态变量、常量以及编译器编译后的代码。</p>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="int-gt-Integer"><a href="#int-gt-Integer" class="headerlink" title="int -&gt; Integer"></a>int -&gt; Integer</h2><blockquote>
<p>Integer a = 59;<br>int b = 59;<br>Integer c = Integer.valueOf(59);<br>Integer d = new Integer(59);</p>
</blockquote>
<p>a 会调用<code>valueOf</code>方法 这个方法返回的是一个Integer对象。下面是它的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看出当i的值在[-128,127]而且在<code>IntegerCache</code>中存在此对象，就直接返回引用，没有的话创建一个新的对象。<br>显然在这个a之前内存还没有59这个值，所有它创建了一个Integer对象<br>b 是基本类型，存储在栈中<br>c 也用了<code>valueOf</code>这个方法,此时IntegerCache已经存在这个对象，返回引用。<br>d 是一个新的Integer对象<br>在比较int和Integer值时，Integer会调用<code>intValue</code>自动拆箱成int，进行值比较。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h1&gt;&lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h2&gt;&lt;h3 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;以数组实现，节约空间。但是数组容量限制，超出限制会增加50%容量，用System.arraycopy()复制到新的数组。因此最好能给出数组大小的预估值。&lt;/li&gt;
&lt;li&gt;默认第一次大小为10。
    
    </summary>
    
      <category term="Java" scheme="http://amoyiki.com/categories/Java/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]232. Implement Queue using Stacks</title>
    <link href="http://amoyiki.com/2017/01/11/LeetCode-232-Implement-Queue-using-Stacks/"/>
    <id>http://amoyiki.com/2017/01/11/LeetCode-232-Implement-Queue-using-Stacks/</id>
    <published>2017-01-11T03:28:14.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>利用堆栈实现队列功能<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>Stack</code>的特点是先进后出，<code>Queue</code>的特点是先进先出。利用两个<code>Stack</code>，一个负责输入一个负责输出.<br>如果输出堆栈为空，将输入堆栈值传给输出堆栈，若两个堆栈都为空，返回空值<br><code>python</code>中用list模拟堆栈.</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stackA = []</span><br><span class="line">        self.stackB = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.stackA.append(x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.peek()</span><br><span class="line">        self.stackB.pop()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stackB:</span><br><span class="line">            <span class="keyword">return</span> self.stackB[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> self.stackA:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> self.stackA:</span><br><span class="line">                self.stackB.append(self.stackA.pop())</span><br><span class="line">            <span class="keyword">return</span> self.stackB[<span class="number">-1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.stackA)==<span class="number">0</span> <span class="keyword">and</span> len(self.stackB)==<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span></span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; input;</span><br><span class="line">    Stack&lt;Integer&gt; output;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        input = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        output = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        input.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        peek();</span><br><span class="line">        <span class="keyword">return</span> output.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(output.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!input.empty())&#123;</span><br><span class="line">                output.push(input.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input.empty() &amp;&amp; output.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;利用堆栈实现队列功能&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记（二）配置及性能调优</title>
    <link href="http://amoyiki.com/2017/01/06/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://amoyiki.com/2017/01/06/Nginx学习笔记（二）/</id>
    <published>2017-01-06T01:39:42.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="配置文档"><a href="#配置文档" class="headerlink" title="配置文档"></a>配置文档</h3><p>1.nginx文档结构<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...  #全局块</span><br><span class="line">events &#123; #events块</span><br><span class="line">    ...  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123; #http块</span><br><span class="line">    ... #http全局块</span><br><span class="line"></span><br><span class="line">    server &#123; #server块</span><br><span class="line">        ... #server全局块</span><br><span class="line"></span><br><span class="line">        location [PATTRERN] &#123; #location块</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location [PATTRERN] &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li><code>全局块</code>：配置会影响nginx全局指令</li>
<li><code>events块</code>：配置事件驱动模型和最大连接数</li>
<li><code>http块</code>：可以嵌套多个server，配置代理，缓存，日志</li>
<li><code>server块</code>：</li>
<li><code>location块</code>：<br><strong> –施工中– </strong><h3 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h3><strong> –施工中– </strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何使用&quot;&gt;&lt;a href=&quot;#如何使用&quot; class=&quot;headerlink&quot; title=&quot;如何使用&quot;&gt;&lt;/a&gt;如何使用&lt;/h2&gt;&lt;h3 id=&quot;配置文档&quot;&gt;&lt;a href=&quot;#配置文档&quot; class=&quot;headerlink&quot; title=&quot;配置文档&quot;&gt;&lt;/a&gt;配置文档&lt;/h3&gt;&lt;p&gt;1.nginx文档结构&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...  #全局块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events &amp;#123; #events块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http &amp;#123; #http块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... #http全局块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server &amp;#123; #server块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ... #server全局块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location [PATTRERN] &amp;#123; #location块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location [PATTRERN] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://amoyiki.com/categories/Nginx/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]105.Construct Binary Tree from Preorder and Inorder Traversal</title>
    <link href="http://amoyiki.com/2017/01/05/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/"/>
    <id>http://amoyiki.com/2017/01/05/LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</id>
    <published>2017-01-05T09:52:05.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定树的前序遍历和中序遍历，构建出这个二叉树<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>相对于Python的数组切割,Java取下标值来获取每次递归所需的值区间。所以需要一个辅助函数来负责递归。<br>前序遍历中第一个元素pre[0]一定是root节点。<br>假设该节点的元素在中序中是在in[5],那么中序中的in[0] ~ in[4]就是左子树，<br>in[6] ~ end 就是右子树。<br>第二次递归，左子树从pre[1]开始(即pre[0]的下移一位)。中序数组从0~4<br>右子树从pre[0+5-0+1]开始,中序数组从6~end<br>第三次<br>…</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(self, preorder, inorder)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> preorder <span class="keyword">or</span> <span class="keyword">not</span> inorder:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        rootValue = preorder.pop(<span class="number">0</span>)</span><br><span class="line">        root = TreeNode(rootValue)</span><br><span class="line">        inorderIndex = inorder.index(rootValue)</span><br><span class="line"></span><br><span class="line">        root.left = self.buildTree(preorder, inorder[:inorderIndex])</span><br><span class="line">        root.right = self.buildTree(preorder, inorder[inorderIndex+<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure></p>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soultion</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[]preorder, <span class="keyword">int</span>[] inorder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>,<span class="number">0</span>,inorder.length-<span class="number">1</span>,preorder,inorder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span> preStart, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd, <span class="keyword">int</span>[] pre,<span class="keyword">int</span>[] in)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preStart &gt; pre.length - <span class="number">1</span> || inStart &gt; inEnd)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[preStart]);</span><br><span class="line">        <span class="keyword">int</span> inIndex = <span class="number">0</span>; <span class="comment">// root节点在中序数组中的下标位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i == inStart; i&lt;= inEnd; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]==root.val)&#123;</span><br><span class="line">                inIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* </span><br><span class="line">        左子树：前序数组从当前root下标的下一位开始，中序数组从开头开始到当前root下标的前一位结束</span><br><span class="line">        右子树：前序数组从当前root下标的下一位，中序数组从root下标下一位到结束</span><br><span class="line">        */</span></span><br><span class="line">        root.left = helper(preStart + <span class="number">1</span>, inStart, inIndex - <span class="number">1</span>, pre, in);</span><br><span class="line">        root.right = helper(preStart + inIndex - inStart + <span class="number">1</span>, inIndex + <span class="number">1</span>, inEnd , pr, in);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;给定树的前序遍历和中序遍历，构建出这个二叉树&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]74. Search a 2D Matrix</title>
    <link href="http://amoyiki.com/2016/12/21/LeetCode-74-Search-a-2D-Matrix/"/>
    <id>http://amoyiki.com/2016/12/21/LeetCode-74-Search-a-2D-Matrix/</id>
    <published>2016-12-21T02:42:05.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>一开始打算用二分查找的方式，将二维数组划分成两部分，递归判断。实际写出来的时候就发现，二维数组并不好去判断值。后来在网上看到一个更好的方法。</p>
<blockquote>
<p>将二维数组转化成二维平面，将target值从第一行的最后一个值开始查找，小于就往左边移动，大于就往下面移动。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
<td style="text-align:center">5</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">11</td>
<td style="text-align:center">16</td>
<td style="text-align:center">20</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">30</td>
<td style="text-align:center">34</td>
<td style="text-align:center">50</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> matrix <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(matrix)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        row = len(matrix)</span><br><span class="line">        col = len(matrix[<span class="number">0</span>])</span><br><span class="line">        i=col<span class="number">-1</span></span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;row):</span><br><span class="line">            <span class="keyword">if</span> matrix[j][i] == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">elif</span> matrix[j][i] &gt; target:</span><br><span class="line">                i = i - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> matrix[j][i] &lt; target:</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p>
<p><strong>java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix==<span class="keyword">null</span> || matrix.length==<span class="number">0</span> || matrix[<span class="number">0</span>].length==<span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= matrix.length - <span class="number">1</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == matrix[i][j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; matrix[i][j]) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; matrix[i][j]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;h3 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h3&gt;&lt;p&gt;一开始打算用二分查找的方式，将二维数组划分成两部分，递归判断。实际写出来的时候就发现，二维数组并不好去判断值。后来在网上看到一个更好的方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将二维数组转化成二维平面，将target值从第一行的最后一个值开始查找，小于就往左边移动，大于就往下面移动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;30&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;34&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>离线安装VMWare Tools</title>
    <link href="http://amoyiki.com/2016/12/19/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85WMWare-Tools/"/>
    <id>http://amoyiki.com/2016/12/19/离线安装WMWare-Tools/</id>
    <published>2016-12-19T08:26:33.000Z</published>
    <updated>2017-01-02T05:29:23.406Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://softwareupdate.vmware.com/cds/vmw-desktop/ws/11.0.0/2305329/windows/packages/" target="_blank" rel="external">VMWare Tools</a></p>
<h3 id="解压tools文件"><a href="#解压tools文件" class="headerlink" title="解压tools文件"></a>解压tools文件</h3><p><code>win+R</code>打开运行窗口,解压exe文件</p>
<blockquote>
<p>..\tools-windows-*.exe /e .\<br>解压成iso文件<br>msiexec /a “..\tools-windows.msi” /qb TARGETDIR=”.\”</p>
</blockquote>
<p>虚拟机加载iso即可安装VMWare Tools</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://softwareupdate.vmware.com/cds/vmw-desktop/ws/11.0.0/2305329/windows/packages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VMWare Tool
    
    </summary>
    
      <category term="工具配置" scheme="http://amoyiki.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="WMWare" scheme="http://amoyiki.com/tags/WMWare/"/>
    
  </entry>
  
  <entry>
    <title>Python协程</title>
    <link href="http://amoyiki.com/2016/12/16/Python%E5%8D%8F%E7%A8%8B/"/>
    <id>http://amoyiki.com/2016/12/16/Python协程/</id>
    <published>2016-12-16T03:04:21.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<p> <strong> – 施工中 – </strong><br><a id="more"></a></p>
<blockquote>
<p>Because generator-iterators begin execution at the top of the<br>    generator’s function body, there is no yield expression to receive<br>    a value when the generator has just been created.  Therefore,<br>    calling send() with a non-None argument is prohibited when the<br>    generator iterator has just started, and a TypeError is raised if<br>    this occurs (presumably due to a logic error of some kind).  Thus,<br>    before you can communicate with a coroutine you must first call<br>    next() or send(None) to advance its execution to the first yield<br>    expression.</p>
</blockquote>
<p><del>因为生成器在执行函数时，生成器刚被创建，没有接收到yield表达式的值<br>隐藏当生成器启动时禁止进行无参send()方法</del></p>
<h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span> <span class="comment"># 定义一个消费者，由于有yeild关键字，此方法是个生成器</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[Consumer] Init Consumer ...'</span></span><br><span class="line">    r = <span class="string">'init ok'</span> <span class="comment"># 初始化返回结果，在启动消费者的时候，返回给生成者</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r <span class="comment"># 消费者通过yield接收生产者的消息，并返回其结果</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[Consumer] consume n = %s, r=%s'</span>%(n,r)</span><br><span class="line">        r = <span class="string">'consume %s OK'</span> % n <span class="comment"># 消费者消费结果，下个循环返回给生成者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">produce</span><span class="params">(c)</span>:</span> <span class="comment"># 定义一个生产者，c为消费者生成器</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[Producer] Init Producer ...'</span></span><br><span class="line">    r = c.send(<span class="keyword">None</span>) <span class="comment"># 启动消费者生成器，同时返回第一次结果</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[Producer] While, Producing %s ...'</span>%n</span><br><span class="line">        r = c.send(n) <span class="comment"># 向消费者发送消息并准备接收结果。此时会切换到消费者执行</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[Producer] Consumer return: %s'</span>%r</span><br><span class="line">    c.close()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[Producer] Close Producer ....'</span></span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt; – 施工中 – &lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://amoyiki.com/categories/Python/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>git技巧--gitignore配置</title>
    <link href="http://amoyiki.com/2016/12/15/git%E6%8A%80%E5%B7%A7-gitignore%E9%85%8D%E7%BD%AE/"/>
    <id>http://amoyiki.com/2016/12/15/git技巧-gitignore配置/</id>
    <published>2016-12-15T05:54:08.000Z</published>
    <updated>2016-12-19T14:08:43.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gitignore-文件配置"><a href="#gitignore-文件配置" class="headerlink" title=".gitignore 文件配置"></a>.gitignore 文件配置</h2><h3 id="gitignore-配置无法解决问题时"><a href="#gitignore-配置无法解决问题时" class="headerlink" title=".gitignore 配置无法解决问题时"></a>.gitignore 配置无法解决问题时</h3><p>如果<code>.gitignore</code>配置完后，仍无法屏蔽掉特殊文件的情况。我们可以手动修改项目路径下的<code>.git/info/exclude</code>文件。例如：</p>
<blockquote>
<p>在Pycharm下进行Python开发时会生成临时文件<code>__pycache__/</code>,只需将这个文件名写到exclude文件内即可。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;gitignore-文件配置&quot;&gt;&lt;a href=&quot;#gitignore-文件配置&quot; class=&quot;headerlink&quot; title=&quot;.gitignore 文件配置&quot;&gt;&lt;/a&gt;.gitignore 文件配置&lt;/h2&gt;&lt;h3 id=&quot;gitignore-配置无法解
    
    </summary>
    
      <category term="Git" scheme="http://amoyiki.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://amoyiki.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>编写一个Chrome extension--网页二维码生成</title>
    <link href="http://amoyiki.com/2016/12/13/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAChrome-extension-%E7%BD%91%E9%A1%B5%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90/"/>
    <id>http://amoyiki.com/2016/12/13/编写一个Chrome-extension-网页二维码生成/</id>
    <published>2016-12-13T14:11:33.000Z</published>
    <updated>2016-12-14T14:08:18.524Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很早之前就想过要用Chrome扩展开发一些实用的，或者有意思扩展。今天在看了<code>segmentfault</code>的技术周刊后，决定先按照别人写过的东西去<del>抄一遍</del>模仿的做一遍。</p>
</blockquote>
<p>本篇文章是看了<a href="https://segmentfault.com/a/1190000007594008" target="_blank" rel="external">从小目标开始，编写一个简洁的二维码chrome扩展</a>模仿的。这篇文章写得很详细。我主要写写自己模仿过程中的一些问题。<br><a id="more"></a></p>
<h2 id="Chrome-extension基础"><a href="#Chrome-extension基础" class="headerlink" title="Chrome extension基础"></a>Chrome extension基础</h2><p>编写Chrome 扩展之前我们需要大致的了解一下Google提供的开发文档。鉴于我可怜的英文水平，我推荐花几分钟看一下下面的文档：</p>
<ol>
<li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">360翻译的官方API文档</a></li>
<li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external">Chrome扩展及应用开发</a> ←这本书不仅介绍API用法，还提供了好多实例。</li>
</ol>
<h2 id="编写过程"><a href="#编写过程" class="headerlink" title="编写过程"></a>编写过程</h2><p>有了上面几分钟的基础后，我们可以开始正式编写代码了。创建一个文件夹，将扩展所创建的文件都放在里面，方便完成后打包。</p>
<h3 id="首先编写manifest-json"><a href="#首先编写manifest-json" class="headerlink" title="首先编写manifest.json"></a>首先编写<code>manifest.json</code></h3><p>这是所有扩展的入口文件。看到后缀我们就知道这文件的语法结构必须符合json的写法。Chrome 扩展必须包含的属性有<code>name</code>、<code>version</code>、<code>manifest_version</code>。其他可选属性包括：<code>background</code>、<code>permissions</code>、<code>browser_action</code>、<code>page_action</code>、<code>options_page</code>、<code>content_scripts</code>等等。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//目前Chrome版本为2</span></span><br><span class="line">    <span class="string">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="comment">//扩展名称</span></span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"QRcode"</span>,</span><br><span class="line">    <span class="comment">//扩展版本，可自定义</span></span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">    <span class="comment">//扩展描述，显示在扩展程序中</span></span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"简洁的二维码生成器"</span>,</span><br><span class="line">    <span class="comment">//显示在扩展程序中的图标</span></span><br><span class="line">    <span class="string">"icons"</span>: &#123;</span><br><span class="line">        <span class="string">"16"</span>: <span class="string">"images/icon16.png"</span>,</span><br><span class="line">        <span class="string">"128"</span>: <span class="string">"images/icon128.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//权限声明</span></span><br><span class="line">    <span class="string">"permissions"</span>:[<span class="string">"tabs"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="接下来就要编写扩展弹出页面popup-html文件"><a href="#接下来就要编写扩展弹出页面popup-html文件" class="headerlink" title="接下来就要编写扩展弹出页面popup.html文件"></a>接下来就要编写扩展弹出页面<code>popup.html</code>文件</h3><p>popup页面在被用户点击时初始化，关闭后就会销毁。所以该页面更多的是用来展示结果的。数据处理则需要<code>background</code>这个属性来声明，这里暂时没用到就不多说了。需要注意的是，应该用css指定popup页面大小。另外，Google不允许HTML和JavaScript混写在同一个文件内。所有我们把相应的JS提出来，在HTML中添加外部引用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><br><span class="line">    .box &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background: #EEE;</span><br><span class="line">    &#125;</span><br><span class="line">    .box .title&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>扫描二维码浏览本页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"qrcode"</span> <span class="attr">id</span>=<span class="string">"qrcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/qrcode.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/popup.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="编写相应的popup-js文件"><a href="#编写相应的popup-js文件" class="headerlink" title="编写相应的popup.js文件"></a>编写相应的<code>popup.js</code>文件</h3><p><code>chrome.tabs</code>这个API可以与浏览器的标签页系统进行交互。具体API说明参考<a href="http://open.chrome.360.cn/extension_dev/tabs.html" target="_blank" rel="external">标签–扩展开发文档</a><br>通过获取到的标签页url传给<a href="http://code.ciaoca.com/javascript/qrcode/" target="_blank" rel="external">QRCode</a>。通过<code>QRCode.js</code>生成二维码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  chrome.tabs.getSelected(<span class="function"><span class="keyword">function</span>(<span class="params">tab</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//QRCode(元素id,相关配置文件)</span></span><br><span class="line">      <span class="keyword">var</span> qrcode = <span class="keyword">new</span> QRCode(<span class="string">"qrcode"</span>, &#123;</span><br><span class="line">              text: tab.url,</span><br><span class="line">              width: <span class="number">160</span>,</span><br><span class="line">              height: <span class="number">160</span>,</span><br><span class="line">              colorDark : <span class="string">'#000000'</span>,</span><br><span class="line">              colorLight : <span class="string">'#ffffff'</span>,</span><br><span class="line">              <span class="comment">// QRCode的容错级别</span></span><br><span class="line">              correctLevel : QRCode.CorrectLevel.H</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(qrcode);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>到目前为止，一个简单的QRCode生成器边完成了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode01.png" alt="加载自定义插件" title="">
                </div>
                <div class="image-caption">加载自定义插件</div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oi6538cys.bkt.clouddn.com/chrome_extension_qrcode02.png" alt="QRCode" title="">
                </div>
                <div class="image-caption">QRCode</div>
            </figure></p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>如果想让二维码中间位置显示自定义图片(如上图)，那么只需要在popup页面自定义一段CSS即可。</p>
<h3 id="修改popup-html文件"><a href="#修改popup-html文件" class="headerlink" title="修改popup.html文件"></a>修改<code>popup.html</code>文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span><br><span class="line">    .box &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background: #EEE;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .box .title&#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">    .box .qrcode&#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">    .box .logo &#123;</span><br><span class="line">          top: 80px;</span><br><span class="line">          left: 80px;</span><br><span class="line">          width: 40px;</span><br><span class="line">          height: 40px;</span><br><span class="line">          position: absolute;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>扫描二维码浏览本页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"qrcode"</span> <span class="attr">id</span>=<span class="string">"qrcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'logo'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://amoyiki.github.io/images/avatar.jpg"</span> <span class="attr">width</span>=<span class="string">"40"</span> <span class="attr">height</span>=<span class="string">"40"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/qrcode.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/popup.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态获取网页icon"><a href="#动态获取网页icon" class="headerlink" title="动态获取网页icon"></a>动态获取网页icon</h3><p>如果想让icon图标随着每个网站不同的icon进行变动的话，就只要利用<code>tab</code>的<code>favIconUrl</code>属性就能得到标签页面的图标url地址,改动如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  chrome.tabs.getSelected(<span class="function"><span class="keyword">function</span>(<span class="params">tab</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//QRCode(元素id,相关配置文件)</span></span><br><span class="line">      <span class="keyword">var</span> qrcode = <span class="keyword">new</span> QRCode(<span class="string">"qrcode"</span>, &#123;</span><br><span class="line">              text: tab.url,</span><br><span class="line">              width: <span class="number">160</span>,</span><br><span class="line">              height: <span class="number">160</span>,</span><br><span class="line">              colorDark : <span class="string">'#000000'</span>,</span><br><span class="line">              colorLight : <span class="string">'#ffffff'</span>,</span><br><span class="line">              <span class="comment">// QRCode的容错级别</span></span><br><span class="line">              correctLevel : QRCode.CorrectLevel.H</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="keyword">if</span> (tab.favIconUrl) &#123;<span class="comment">//tab有图标的情况下动态赋值</span></span><br><span class="line">      <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>)[<span class="number">1</span>].src = tab.favIconUrl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(img);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>详细代码可以查看<a href="https://github.com/amoyiki/LearnedAndProTest/tree/master/QRCode" target="_blank" rel="external">github源码地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很早之前就想过要用Chrome扩展开发一些实用的，或者有意思扩展。今天在看了&lt;code&gt;segmentfault&lt;/code&gt;的技术周刊后，决定先按照别人写过的东西去&lt;del&gt;抄一遍&lt;/del&gt;模仿的做一遍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇文章是看了&lt;a href=&quot;https://segmentfault.com/a/1190000007594008&quot;&gt;从小目标开始，编写一个简洁的二维码chrome扩展&lt;/a&gt;模仿的。这篇文章写得很详细。我主要写写自己模仿过程中的一些问题。&lt;br&gt;
    
    </summary>
    
      <category term="Chrome extension" scheme="http://amoyiki.com/categories/Chrome-extension/"/>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode]290. Word Pattern</title>
    <link href="http://amoyiki.com/2016/12/12/LeetCode-290-Word-Pattern/"/>
    <id>http://amoyiki.com/2016/12/12/LeetCode-290-Word-Pattern/</id>
    <published>2016-12-12T08:48:27.000Z</published>
    <updated>2016-12-14T14:08:18.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个模式pattern和一个字符串str，判断str是否满足相同的pattern。<br>例如：<br>pattern = “abba”, str = “dog cat cat dog” 则返回 true.<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>判断pattern，str每个元素出现的下标，求得的数组相等即返回true</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern, str)</span>:</span></span><br><span class="line">        p = pattern</span><br><span class="line">        s = str.split()</span><br><span class="line">        <span class="keyword">return</span> map(p.find,p) == map(s.index,s)</span><br></pre></td></tr></table></figure></p>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] words = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(pattern.length() != words.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        Map&lt;Character,String&gt; map = <span class="keyword">new</span> HashMap&lt;Character,String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;words.length;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> p = pattern.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(p))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.get(p).equals(words[i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (set.contains(words[i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(p,words[i]);</span><br><span class="line">                set.add(words[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;给定一个模式pattern和一个字符串str，判断str是否满足相同的pattern。&lt;br&gt;例如：&lt;br&gt;pattern = “abba”, str = “dog cat cat dog” 则返回 true.&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]303. Range Sum Query - Immutable</title>
    <link href="http://amoyiki.com/2016/12/07/LeetCode-303-Range-Sum-Query-Immutable/"/>
    <id>http://amoyiki.com/2016/12/07/LeetCode-303-Range-Sum-Query-Immutable/</id>
    <published>2016-12-07T06:34:39.000Z</published>
    <updated>2016-12-13T13:11:35.169Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个数字数组，求下标在i和j(i ≤ j)之间的元素和<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用一个辅助数组sums[x+1]来存储当前位置与之前元素的累加和</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,nums)</span>:</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        <span class="comment"># 辅助函数sums，计算每个位置与之前的数字累积和</span></span><br><span class="line">        self.sums = [<span class="number">0</span>] * (size + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(size):</span><br><span class="line">            <span class="comment"># 当前(x+1)位置元素累积和 = 前一位(累积和)+当前元素</span></span><br><span class="line">            self.sums[x + <span class="number">1</span>] += self.sums[x] + nums[x]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self,i,j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.sums[j+<span class="number">1</span>] - self.sums[i]</span><br></pre></td></tr></table></figure></p>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sums;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.length;</span><br><span class="line">        sums = <span class="keyword">new</span> <span class="keyword">int</span>[size+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            sums[i+<span class="number">1</span>] = sums[i] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sums[j+<span class="number">1</span>] - sums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;给定一个数字数组，求下标在i和j(i ≤ j)之间的元素和&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>HashMap,Hashtable,ConcurrentHashMap,SynchronizedMap的原理与区别</title>
    <link href="http://amoyiki.com/2016/12/07/%E4%BA%86%E8%A7%A3HashMap/"/>
    <id>http://amoyiki.com/2016/12/07/了解HashMap/</id>
    <published>2016-12-07T02:28:18.000Z</published>
    <updated>2016-12-13T13:11:35.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="HashMap的碰撞处理"><a href="#HashMap的碰撞处理" class="headerlink" title="HashMap的碰撞处理"></a>HashMap的碰撞处理</h3><p>HashMap通过hashCode()方法来确定元素存储的bucketIndex位置，不同的Key有概率hash是相同的。<br>两个不同Key的hash值相同时，HashMap通过单链表方式，将新元素加入链表表头，通过next指向原有元素。<br><a id="more"></a><br><strong> 在JDK1.8版本中，只要bucket中的链表长度超过阈值（8）时，会将链表转化为红黑树</strong><br>在JDK1.7中HashMap的put方法源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="comment">//处理Key为null</span></span><br><span class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">       <span class="comment">//得到key的hash码</span></span><br><span class="line">       <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">       <span class="comment">//由hash码获取bucketIndex下标</span></span><br><span class="line">       <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">       <span class="comment">//取出bucketIndex上元素，形成单链表</span></span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="comment">//hash码相同时且对象相同时</span></span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">               <span class="comment">//替换旧值</span></span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               e.value = value;</span><br><span class="line">               e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//key不存在，加入新元素</span></span><br><span class="line">       modCount++;</span><br><span class="line">       addEntry(hash, key, value, i);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="为什么HashMap线程不安全"><a href="#为什么HashMap线程不安全" class="headerlink" title="为什么HashMap线程不安全"></a>为什么HashMap线程不安全</h3><ol>
<li>并发时，多线程同时操作使用put方法添加元素<br>，如果发生碰撞，可能会导致两个值添加到同一位置，致使最终有一个值被覆盖</li>
<li>多线程使用HashMap进行扩容时，可能会形成循环链路，详情可以看看<a href="http://coolshell.cn/articles/9606.html" target="_blank" rel="external">Java HashMap的死循环</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h2&gt;&lt;h3 id=&quot;HashMap的碰撞处理&quot;&gt;&lt;a href=&quot;#HashMap的碰撞处理&quot; class=&quot;headerlink&quot; title=&quot;HashMap的碰撞处理&quot;&gt;&lt;/a&gt;HashMap的碰撞处理&lt;/h3&gt;&lt;p&gt;HashMap通过hashCode()方法来确定元素存储的bucketIndex位置，不同的Key有概率hash是相同的。&lt;br&gt;两个不同Key的hash值相同时，HashMap通过单链表方式，将新元素加入链表表头，通过next指向原有元素。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://amoyiki.com/categories/Java/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾回收</title>
    <link href="http://amoyiki.com/2016/12/06/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://amoyiki.com/2016/12/06/Java垃圾回收/</id>
    <published>2016-12-06T08:32:20.000Z</published>
    <updated>2016-12-06T12:40:08.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GC-如何判断对象可以被回收"><a href="#GC-如何判断对象可以被回收" class="headerlink" title="GC 如何判断对象可以被回收"></a>GC 如何判断对象可以被回收</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>早期Java使用的算法，现已不用。</p>
<h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>以<code>GC Root</code> 作为起始点，向下搜索。走过的路径成为<code>引用链</code>。当一个对象到<code>GC Root</code><br>没有任何引用链相连时，证明对象不可用。<br><strong>Java的<code>GC Root</code>对象包括：</strong></p>
<ol>
<li>虚拟机栈（栈帧中的本地变量表中引用对象）</li>
<li>方法区中类静态属性引用对象</li>
<li>方法区常量引用对象</li>
<li>本地方法JNI引用对象</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GC-如何判断对象可以被回收&quot;&gt;&lt;a href=&quot;#GC-如何判断对象可以被回收&quot; class=&quot;headerlink&quot; title=&quot;GC 如何判断对象可以被回收&quot;&gt;&lt;/a&gt;GC 如何判断对象可以被回收&lt;/h2&gt;&lt;h3 id=&quot;引用计数算法&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Java VM" scheme="http://amoyiki.com/categories/Java-VM/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]463. Island Perimeter</title>
    <link href="http://amoyiki.com/2016/11/23/LeetCode-463-Island-Perimeter/"/>
    <id>http://amoyiki.com/2016/11/23/LeetCode-463-Island-Perimeter/</id>
    <published>2016-11-23T02:01:55.000Z</published>
    <updated>2016-12-13T13:11:35.169Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个二维地图，1表示陆地，0表示水域。每一个陆地<br>是边长为1的正方形。求岛屿的周长。<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>每个格子周长为4，两个格子相邻时周长-2</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">islandPerimeter</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        h = len(grid)</span><br><span class="line">        w = len(grid[<span class="number">0</span>]) <span class="keyword">if</span> h <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(h):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(w):</span><br><span class="line">                <span class="keyword">if</span> grid[x][y] == <span class="number">1</span>:</span><br><span class="line">                    ans += <span class="number">4</span></span><br><span class="line">                    <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> grid[x<span class="number">-1</span>][y]:</span><br><span class="line">                        ans -= <span class="number">2</span></span><br><span class="line">                    <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">and</span> grid[x][y<span class="number">-1</span>]:</span><br><span class="line">                        ans -= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h = g.length;</span><br><span class="line">        <span class="keyword">int</span> w = g[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (g[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    ans += <span class="number">4</span>;</span><br><span class="line">                    <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; g[i-<span class="number">1</span>][j] == <span class="number">1</span>) ans -= <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(j &gt; <span class="number">0</span> &amp;&amp; g[i][j-<span class="number">1</span>] == <span class="number">1</span>) ans -= <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;给定一个二维地图，1表示陆地，0表示水域。每一个陆地&lt;br&gt;是边长为1的正方形。求岛屿的周长。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]217. Contains Duplicate</title>
    <link href="http://amoyiki.com/2016/11/10/LeetCode-217-Contains-Duplicate/"/>
    <id>http://amoyiki.com/2016/11/10/LeetCode-217-Contains-Duplicate/</id>
    <published>2016-11-10T06:44:59.000Z</published>
    <updated>2016-12-13T13:11:35.153Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个整数数组，判断是否包含重复元素，是返回true。<br>若都是唯一返回false<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用set这种数据结构的特点，只要set后的数据长度不等于原来的数据长度的话，就证明有重复元素，否则证明没有重复元素。</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">containsDuplicate</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(nums) != len(set(nums))</span><br></pre></td></tr></table></figure></p>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set s = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n:nums)&#123;</span><br><span class="line">            s.add(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums.length != s.size()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;给定一个整数数组，判断是否包含重复元素，是返回true。&lt;br&gt;若都是唯一返回false&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]453.Minimum Moves to Equal Array Elements</title>
    <link href="http://amoyiki.com/2016/11/09/LeetCode-453-Minimum-Moves-to-Equal-Array-Elements/"/>
    <id>http://amoyiki.com/2016/11/09/LeetCode-453-Minimum-Moves-to-Equal-Array-Elements/</id>
    <published>2016-11-09T08:21:57.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个长度为n的非空数字数组，每次对n-1个加1。<br>求所有元素值相等，需要几次操作。<br><a id="more"></a></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>操作次数 = 数组总和 - 数组中最小的数*数组长度</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minMoves</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(nums) - min(nums)*len(nums)</span><br></pre></td></tr></table></figure></p>
<p><strong>java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i: nums)&#123;</span><br><span class="line">            min = Math.min(min,i);</span><br><span class="line">            sum +=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - min*nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;给定一个长度为n的非空数字数组，每次对n-1个加1。&lt;br&gt;求所有元素值相等，需要几次操作。&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]409.Longest Palindrome</title>
    <link href="http://amoyiki.com/2016/11/09/LeetCode-409-Longest-Palindrome/"/>
    <id>http://amoyiki.com/2016/11/09/LeetCode-409-Longest-Palindrome/</id>
    <published>2016-11-09T02:50:21.000Z</published>
    <updated>2016-12-13T13:11:35.169Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>求一串字符串最大的回文子字符串长度<br><a id="more"></a><br><strong>注意：</strong><br>1.大小写敏感.<br>2.默认字符串全大写或全小写</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>偶数字符个数累加；奇数字符个数先减一再累加，同时计算奇数个数。<br>最后如果奇数个数大于0，累加结果再加1。</p>
<h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p><strong>python</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        ans = odd = <span class="number">0</span></span><br><span class="line">        count = collections.Counter(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> count:</span><br><span class="line">            ans += count[i]</span><br><span class="line">            <span class="keyword">if</span> count[i] % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                ans -= <span class="number">1</span></span><br><span class="line">                odd += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans + (odd &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>Java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soultion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] map = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            map[c] = !map[c];<span class="comment">//将有字符的位置由false变成true</span></span><br><span class="line">            <span class="comment">//如果该位置为false的话证明有偶数个数存在</span></span><br><span class="line">            <span class="keyword">if</span>(!map[c]) len += <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果字符串长度大于已累计长度，添加一个元素放在回文字符串中间</span></span><br><span class="line">        <span class="keyword">if</span> (len &lt; s.length())len++;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;求一串字符串最大的回文子字符串长度&lt;br&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://amoyiki.com/categories/Algorithms/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构--Java（2）实现链表</title>
    <link href="http://amoyiki.com/2016/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Java%EF%BC%882%EF%BC%89%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://amoyiki.com/2016/11/07/数据结构-Java（2）实现链表/</id>
    <published>2016-11-07T08:34:03.000Z</published>
    <updated>2017-02-16T09:12:21.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Administrator on 2016-11-07.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node next;</span><br><span class="line">        <span class="keyword">private</span> Object obj;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node first;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(obj);</span><br><span class="line">        node.next = <span class="keyword">this</span>.first;</span><br><span class="line">        <span class="keyword">this</span>.first = node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">delFirst</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"This LinkedList is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp = <span class="keyword">this</span>.first;</span><br><span class="line">        <span class="keyword">this</span>.first = temp.next;</span><br><span class="line">        <span class="keyword">return</span> temp.obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"This LinkedList is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node node = <span class="keyword">new</span> Node(obj);</span><br><span class="line">        Node cur = first;</span><br><span class="line">        Node pre = first;</span><br><span class="line">        <span class="keyword">while</span> (index != pos)&#123;</span><br><span class="line">            pre = first;</span><br><span class="line">            cur = first.next;</span><br><span class="line">            pos++;</span><br><span class="line">        &#125;</span><br><span class="line">        node.next = cur;</span><br><span class="line">        pre.next = node;</span><br><span class="line">        pos = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"This LinkedList is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (first.obj.equals(obj))&#123;</span><br><span class="line">            <span class="keyword">this</span>.first = <span class="keyword">this</span>.first.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Node pre = <span class="keyword">this</span>.first;</span><br><span class="line">            Node cur = <span class="keyword">this</span>.first.next;</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.obj.equals(obj))&#123;</span><br><span class="line">                    pre.next = cur.next;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Not Found"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">find</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"This LinkedList is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node cur = first;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.obj.equals(obj))&#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (first == <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(first == <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(<span class="string">"empty"</span>);</span><br><span class="line">        Node cur = first;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(cur.obj.toString() + <span class="string">" -&gt; "</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LinkedList ll = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        ll.addFirst(<span class="number">4</span>);</span><br><span class="line">        ll.addFirst(<span class="number">3</span>);</span><br><span class="line">        ll.addFirst(<span class="number">2</span>);</span><br><span class="line">        ll.addFirst(<span class="number">1</span>);</span><br><span class="line">        ll.display();</span><br><span class="line">        ll.delFirst();</span><br><span class="line">        ll.display();</span><br><span class="line">        ll.remove(<span class="number">3</span>);</span><br><span class="line">        ll.display();</span><br><span class="line">        System.out.println(ll.find(<span class="number">1</span>));</span><br><span class="line">        System.out.println(ll.find(<span class="number">4</span>).obj);</span><br><span class="line">        ll.add(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">        ll.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>out</strong></p>
<blockquote>
<p>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt;<br>2 -&gt; 3 -&gt; 4 -&gt;<br>2 -&gt; 4 -&gt;<br>null<br>4<br>2 -&gt; 5 -&gt; 4 -&gt; </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单向链表&quot;&gt;&lt;a href=&quot;#单向链表&quot; class=&quot;headerlink&quot; title=&quot;单向链表&quot;&gt;&lt;/a&gt;单向链表&lt;/h3&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="http://amoyiki.com/categories/Data-Structure/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构--Java（1） 实现Stack</title>
    <link href="http://amoyiki.com/2016/10/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Java%EF%BC%881%EF%BC%89-%E5%AE%9E%E7%8E%B0Stack/"/>
    <id>http://amoyiki.com/2016/10/31/数据结构-Java（1）-实现Stack/</id>
    <published>2016-10-31T07:59:38.000Z</published>
    <updated>2017-02-16T09:12:14.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用数组实现Stack"><a href="#利用数组实现Stack" class="headerlink" title="利用数组实现Stack"></a>利用数组实现Stack</h3><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">StackADT</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SIZE=<span class="number">2</span>;<span class="comment">//默认大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;<span class="comment">//栈容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//栈大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;</span><br><span class="line">    <span class="keyword">private</span> Object[] array;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = DEFAULT_SIZE;</span><br><span class="line">        <span class="keyword">this</span>.array = <span class="keyword">new</span> Object[<span class="keyword">this</span>.capacity];</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        System.out.println(top);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.array = <span class="keyword">new</span> Object[<span class="keyword">this</span>.capacity];</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Arrays.fill(<span class="keyword">this</span>.array,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.capacity = DEFAULT_SIZE;</span><br><span class="line">        <span class="keyword">this</span>.array = <span class="keyword">new</span> Object[<span class="keyword">this</span>.capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>.array[<span class="keyword">this</span>.top-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T v = (T) <span class="keyword">this</span>.array[top-<span class="number">1</span>];</span><br><span class="line">        array[<span class="keyword">this</span>.top-<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.top = <span class="keyword">this</span>.top - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.size--;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.size&lt;<span class="keyword">this</span>.capacity)&#123;</span><br><span class="line">            <span class="keyword">this</span>.array[top] = v;</span><br><span class="line">            <span class="keyword">this</span>.size++;</span><br><span class="line">            <span class="keyword">this</span>.top++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            addStackCap();</span><br><span class="line">            push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addStackCap</span><span class="params">()</span> </span>&#123;<span class="comment">//扩容</span></span><br><span class="line">        <span class="keyword">this</span>.capacity = <span class="keyword">this</span>.capacity+DEFAULT_SIZE;</span><br><span class="line">        Object[] newArray = <span class="keyword">new</span> Object[<span class="keyword">this</span>.capacity];</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.array, <span class="number">0</span>, newArray, <span class="number">0</span>,<span class="keyword">this</span>.array.length);</span><br><span class="line">        Arrays.fill(array, <span class="keyword">null</span>);<span class="comment">//原来的数组置空</span></span><br><span class="line">        <span class="keyword">this</span>.array = newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 测试栈</span><br><span class="line">     * <span class="doctag">@param</span> args</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayStack&lt;Integer&gt; a = <span class="keyword">new</span> ArrayStack&lt;Integer&gt;();</span><br><span class="line">        a.push(<span class="number">3</span>);</span><br><span class="line">        a.push(<span class="number">5</span>);</span><br><span class="line">        a.push(<span class="number">2</span>);</span><br><span class="line">        a.push(<span class="number">1</span>);</span><br><span class="line">        a.push(<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"栈大小:"</span>+a.size());</span><br><span class="line">        System.out.println(<span class="string">"栈容量:"</span>+a.capacity);</span><br><span class="line">        System.out.println(<span class="string">"栈顶元素:"</span>+a.peek());</span><br><span class="line">        <span class="keyword">while</span> (!a.isEmpty())&#123;</span><br><span class="line">            System.out.println(a.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"栈大小:"</span>+a.size());</span><br><span class="line">        System.out.println(<span class="string">"栈容量:"</span>+a.capacity);</span><br><span class="line">        System.out.println(<span class="string">"栈顶元素:"</span>+a.peek());</span><br><span class="line">        System.out.println(<span class="string">"************"</span>);</span><br><span class="line">        a.clear();</span><br><span class="line">        System.out.println(<span class="string">"栈大小:"</span>+a.size());</span><br><span class="line">        System.out.println(<span class="string">"栈容量:"</span>+a.capacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StackADT</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T v)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="利用LinkedList实现Stack"><a href="#利用LinkedList实现Stack" class="headerlink" title="利用LinkedList实现Stack"></a>利用LinkedList实现Stack</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;T&gt; storage = <span class="keyword">new</span> LinkedList&lt;T&gt;();</span><br><span class="line">    <span class="comment">/** 入栈 **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T v)</span></span>&#123;</span><br><span class="line">        storage.addFirst(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 出栈 **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> storage.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 栈为空 **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> storage.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123; storage.clear(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line">        stack.push(<span class="string">"a"</span>);</span><br><span class="line">        stack.push(<span class="string">"b"</span>);</span><br><span class="line">        stack.push(<span class="string">"c"</span>);</span><br><span class="line">        System.out.println(stack.toString());</span><br><span class="line">        Object obj = stack.pop();</span><br><span class="line">        System.out.println(obj+<span class="string">"------"</span>+stack.toString());</span><br><span class="line">        obj = stack.pop();</span><br><span class="line">        obj = stack.pop();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;利用数组实现Stack&quot;&gt;&lt;a href=&quot;#利用数组实现Stack&quot; class=&quot;headerlink&quot; title=&quot;利用数组实现Stack&quot;&gt;&lt;/a&gt;利用数组实现Stack&lt;/h3&gt;
    
    </summary>
    
      <category term="Data Structure" scheme="http://amoyiki.com/categories/Data-Structure/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记（一）安装Nginx</title>
    <link href="http://amoyiki.com/2016/10/16/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://amoyiki.com/2016/10/16/Nginx学习笔记（一）/</id>
    <published>2016-10-16T14:42:14.000Z</published>
    <updated>2017-01-31T07:56:09.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在Linux下安装Nginx"><a href="#在Linux下安装Nginx" class="headerlink" title="在Linux下安装Nginx"></a>在Linux下安装Nginx</h3><ol>
<li>在<a href="http://nginx.org/en/download.html" target="_blank" rel="external">Nginx官网</a>上下载压缩包。</li>
<li><p>解压后进行安装</p>
<a id="more"></a>
<blockquote>
<p>在./configure的时候会报错<br>./configure: error: the HTTP rewrite module requires the PCRE library.<br> 这时候我们需要在Linux上安装PCRE库<br> sudo apt-get update<br> sudo apt-get install libpcre3 libpcre3-dev<br> 再次编译，发现又报了缺少zlib library，我们再次照葫芦画瓢安装zlib<br> sudo apt-get install zlib1g-dev<br> 再次编译，发现Nginx安装成功！</p>
</blockquote>
</li>
</ol>
<h3 id="Nginx的启动，关闭命令"><a href="#Nginx的启动，关闭命令" class="headerlink" title="Nginx的启动，关闭命令"></a>Nginx的启动，关闭命令</h3><ol>
<li><p>Nginx 启动命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>Nginx 关闭命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -QUIT PID</span><br></pre></td></tr></table></figure>
</li>
<li><p>将Nginx写成服务运行<br>如果每次都去执行<code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code>是非常麻烦的事。所以我们将Nginx的相关操作写成Bash脚本，就能像windows服务一样简单的几个命令就能完成任务。<br>首先我们在网上Copy一份<em><a href="http://github.com/amoyiki/Blog/raw/master/Document/nginx" target="_blank" rel="external">&gt;&gt;Ngnix脚本</a></em><br>然后在Linux执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo wget http://github.com/amoyiki/Blog/raw/master/Document/nginx -O /etc/init.d/nginx</span><br><span class="line">$&gt; sudo chmod +x /etc/init.d/nginx</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>现在我们就可以用简短的命令启动服务了</p>
<blockquote>
<p>Usage: /etc/init.d/nginx {start|stop|restart|force-reload|reload|status|configtest|quietupgrade|terminate|destroy}</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在Linux下安装Nginx&quot;&gt;&lt;a href=&quot;#在Linux下安装Nginx&quot; class=&quot;headerlink&quot; title=&quot;在Linux下安装Nginx&quot;&gt;&lt;/a&gt;在Linux下安装Nginx&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在&lt;a href=&quot;http://nginx.org/en/download.html&quot;&gt;Nginx官网&lt;/a&gt;上下载压缩包。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压后进行安装&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://amoyiki.com/categories/Nginx/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Python一些小技巧</title>
    <link href="http://amoyiki.com/2016/10/10/Python%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://amoyiki.com/2016/10/10/Python一些小技巧/</id>
    <published>2016-10-10T07:31:11.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol>
<li>列表和字典的混合排序<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">persons = [&#123;<span class="string">'name'</span>:<span class="string">'zhang3'</span>,<span class="string">'age'</span>:<span class="number">15</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'li4'</span>,<span class="string">'age'</span>:<span class="number">12</span>&#125;]</span><br><span class="line">persons.sort(<span class="keyword">lambda</span> a,b:a[<span class="string">'age'</span>]-b[<span class="string">'age'</span>]) <span class="comment"># 按照年龄排序</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="两个列表的差异"><a href="#两个列表的差异" class="headerlink" title="两个列表的差异"></a>两个列表的差异</h3><ol>
<li><p>交集</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">value = [v <span class="keyword">for</span> v <span class="keyword">in</span> a <span class="keyword">if</span> v <span class="keyword">in</span> b]</span><br></pre></td></tr></table></figure>
</li>
<li><p>差集</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">value = [v <span class="keyword">for</span> v <span class="keyword">in</span> a <span class="keyword">if</span> <span class="keyword">not</span> v <span class="keyword">in</span> b]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><ol>
<li><p>获得今天时间凌晨，格式：’2016-11-02 00:00:00’</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = datetime.datetime.today().replace(hour=<span class="number">0</span>,minute=<span class="number">0</span>,second=<span class="number">0</span>,microsecond=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>时间相加减</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d1 = datetime.datetime.now()</span><br><span class="line">d2 = d1 + datetime.timedelta()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>其中<code>timedelta</code>方法可以以下几个日期参数进行修改</p>
<blockquote>
<p>days=0,seconds=0,microseconds=0,milliseconds=0,minutes=0,hours=0,weeks=0</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;h3 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;列表和字典的混合排序
    
    </summary>
    
      <category term="Python" scheme="http://amoyiki.com/categories/Python/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title> 编写简单的ORM</title>
    <link href="http://amoyiki.com/2016/08/24/%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84ORM/"/>
    <id>http://amoyiki.com/2016/08/24/编写简单的ORM/</id>
    <published>2016-08-24T01:51:46.000Z</published>
    <updated>2016-11-25T14:23:52.036Z</updated>
    
    <content type="html"><![CDATA[<p>最近在跟着廖雪峰的python3教程，把学习的过程记录下来。日后好反复翻阅<br><a id="more"></a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, colum_type)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = colum_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;%s : %s&gt;'</span> % (self.__class__.__name__, self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span><span class="params">(Field)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        super(IntegerField, self).__init__(name, <span class="string">'bigint'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'Model'</span>:</span><br><span class="line">            <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(<span class="string">"Found model: %s"</span> % name)</span><br><span class="line">        mappings = dict()</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(v, Field):</span><br><span class="line">                print(<span class="string">"Found mapping: %s ==&gt; %s"</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line"></span><br><span class="line">        attrs[<span class="string">'__mappings__'</span>] = mappings  <span class="comment"># 保存属性和映射关系</span></span><br><span class="line">        attrs[<span class="string">'__table__'</span>] = name  <span class="comment"># 表明与类名一致</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(dict, metaclass=ModelMetaclass)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kw)</span>:</span></span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r"'Model' object has no attribute '%s' "</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self)</span>:</span></span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(<span class="string">"?"</span>)</span><br><span class="line">            args.append(getattr(self, k, <span class="keyword">None</span>))</span><br><span class="line">        print(<span class="string">'='</span>.join([<span class="string">'name'</span>, <span class="string">'iki'</span>]))</span><br><span class="line">        sql = <span class="string">"INSERT INTO %s (%s) VALUES (%s)"</span> % (self.__table__, <span class="string">','</span>.join(fields), <span class="string">','</span>.join(params))</span><br><span class="line">        print(<span class="string">'SQL: %s'</span> % sql)</span><br><span class="line">        print(<span class="string">'ARGS: %s'</span> % str(args))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class User(Model):</span><br><span class="line">    # 定义类的属性到列的映射：</span><br><span class="line">    id = IntegerField('id')</span><br><span class="line">    name = StringField('username')</span><br><span class="line">    email = StringField('email')</span><br><span class="line">    password = StringField('password')</span><br><span class="line"></span><br><span class="line">u = User(id=12345, name='Michael', email='test@orm.org', password='my-pwd')</span><br><span class="line">u.save()</span><br><span class="line"></span><br><span class="line">[OUTPUT]</span><br><span class="line">Found model: User</span><br><span class="line">Found mapping: id ==&gt; &lt;IntegerField : id&gt;</span><br><span class="line">Found mapping: name ==&gt; &lt;StringField : username&gt;</span><br><span class="line">Found mapping: email ==&gt; &lt;StringField : email&gt;</span><br><span class="line">Found mapping: password ==&gt; &lt;StringField : password&gt;</span><br><span class="line"></span><br><span class="line">SQL: INSERT INTO User (username,id,email,password) VALUES (?,?,?,?)</span><br><span class="line">ARGS: ['Michael', 12345, 'test@orm.org', 'my-pwd']</span><br></pre></td></tr></table></figure>
<p><strong>本段代码是照着廖雪峰python3教程敲得，后续会补充一些理解和扩展该代码</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在跟着廖雪峰的python3教程，把学习的过程记录下来。日后好反复翻阅&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://amoyiki.com/categories/Python/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SQL小技巧</title>
    <link href="http://amoyiki.com/2016/08/18/SQL%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://amoyiki.com/2016/08/18/SQL小技巧/</id>
    <published>2016-08-18T03:03:00.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="重置表自增长ID值"><a href="#重置表自增长ID值" class="headerlink" title="重置表自增长ID值"></a>重置表自增长ID值</h3><p>有时候我们需要清空一张表的数据，又不想删除增长表。除了删除数据外，还需要将自增长ID重置为0。相关的SQl操作如下</p>
<ol>
<li><p>方法一</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> tb</span><br></pre></td></tr></table></figure>
<p>但是<code>truncate</code>方法不能清空含有<code>Foreign Key</code>约束的表，这个时候就需要用到方法二了。</p>
</li>
<li>方法二<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBCC CHECKIDENT(TB,RESEED,0)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h3 id="循环插入10万条测试数据"><a href="#循环插入10万条测试数据" class="headerlink" title="循环插入10万条测试数据"></a>循环插入10万条测试数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @i <span class="built_in">int</span></span><br><span class="line"><span class="keyword">set</span> @i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> @i&lt;<span class="number">100000</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(title,date_time) <span class="keyword">values</span>(<span class="string">'test'</span>+<span class="keyword">cast</span>(@i <span class="keyword">as</span> <span class="keyword">nvarchar</span>(<span class="number">10</span>)),<span class="keyword">getdate</span>())</span><br><span class="line">    <span class="keyword">set</span> @i=@i+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>:  </p>
<ol>
<li><code>cast()</code>函数是强制类型转换与<code>convert()</code>用法一致</li>
<li><code>declare</code> 用于声明变量</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;重置表自增长ID值&quot;&gt;&lt;a href=&quot;#重置表自增长ID值&quot; class=&quot;headerlink&quot; title=&quot;重置表自增长ID值&quot;&gt;&lt;/a&gt;重置表自增长ID值&lt;/h3&gt;&lt;p&gt;有时候我们需要清空一张表的数据，又不想删除增长表。除了删除数据外，还需要将自增长ID重置为0。相关的SQl操作如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;方法一&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;truncate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; tb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是&lt;code&gt;truncate&lt;/code&gt;方法不能清空含有&lt;code&gt;Foreign Key&lt;/code&gt;约束的表，这个时候就需要用到方法二了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;方法二&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DBCC CHECKIDENT(TB,RESEED,0)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://amoyiki.com/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>零碎的小技巧</title>
    <link href="http://amoyiki.com/2016/08/05/%E9%9B%B6%E7%A2%8E%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://amoyiki.com/2016/08/05/零碎的小技巧/</id>
    <published>2016-08-05T01:47:18.000Z</published>
    <updated>2016-12-14T14:08:18.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何科学上网"><a href="#如何科学上网" class="headerlink" title="如何科学上网"></a>如何科学上网</h3><p>作为一名折腾的人，一名苦逼搬砖程序员，最不能缺少的就是和世界接轨。如果不去了解国外的技术发展，就没有办法提升自身的技术水平。所以，科学上网是一个程序员应该有的基础能力。<br>这里简单的介绍一下目前我使用的科学上网工具。<br><a id="more"></a></p>
<blockquote>
<ol>
<li>vpn代理<br>这个是最常见，最简单的方法。VPN软件也是多的数不胜数。目前我有在使用的是有两款，都是免费的（说到底还是因为穷）。一款是Lantern，另外一款是赛风。</li>
<li>更改Host<br>这个方法只能浏览一些特定的网站，而且网速也是时好时坏。但是，对于只简单的想使用Google相关网站，还是很好用的。因为Host的IP经常会ban掉，所以需要经常更新一下。更新<a href="https://laod.cn/hosts/2016-google-hosts.html" target="_blank" rel="external">Host地址</a></li>
</ol>
</blockquote>
<h3 id="Chrome-Google-首页及默认搜索设置"><a href="#Chrome-Google-首页及默认搜索设置" class="headerlink" title="Chrome Google 首页及默认搜索设置"></a>Chrome Google 首页及默认搜索设置</h3><p>在成功的科学上网后，如果用的是Chrome的话，还可以设置下图操作，利用Https防止链接被和谐。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://oi6538cys.bkt.clouddn.com/16_08_05_01.gif" alt="image" title="">
                </div>
                <div class="image-caption">image</div>
            </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如何科学上网&quot;&gt;&lt;a href=&quot;#如何科学上网&quot; class=&quot;headerlink&quot; title=&quot;如何科学上网&quot;&gt;&lt;/a&gt;如何科学上网&lt;/h3&gt;&lt;p&gt;作为一名折腾的人，一名苦逼搬砖程序员，最不能缺少的就是和世界接轨。如果不去了解国外的技术发展，就没有办法提升自身的技术水平。所以，科学上网是一个程序员应该有的基础能力。&lt;br&gt;这里简单的介绍一下目前我使用的科学上网工具。&lt;br&gt;
    
    </summary>
    
      <category term="工具配置" scheme="http://amoyiki.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim使用技巧</title>
    <link href="http://amoyiki.com/2016/05/19/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://amoyiki.com/2016/05/19/vim使用技巧/</id>
    <published>2016-05-19T00:41:57.000Z</published>
    <updated>2016-11-25T14:23:52.035Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Linux操作系统，顺带的把Vim也稍微的学了一下。下面记录一些常用的Vim操作命令<br>。</p>
<h2 id="Vim移动命令"><a href="#Vim移动命令" class="headerlink" title="Vim移动命令"></a>Vim移动命令</h2><ul>
<li>k,j,h,l 分别是移动光标：上下左右</li>
<li>Ctrl + b / Ctrl + f 分别是上翻一页，下翻一页</li>
<li>gg 移动到文档首</li>
<li>G 移动到文档末</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习Linux操作系统，顺带的把Vim也稍微的学了一下。下面记录一些常用的Vim操作命令&lt;br&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Vim移动命令&quot;&gt;&lt;a href=&quot;#Vim移动命令&quot; class=&quot;headerlink&quot; title=&quot;Vim移动命令&quot;&gt;&lt;/a&gt;Vim移动
    
    </summary>
    
      <category term="Linux" scheme="http://amoyiki.com/categories/Linux/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vim" scheme="http://amoyiki.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>SQL 中Group by 的使用</title>
    <link href="http://amoyiki.com/2016/05/11/SQL%20%E4%B8%ADGroup%20by%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://amoyiki.com/2016/05/11/SQL 中Group by 的使用/</id>
    <published>2016-05-11T02:59:47.000Z</published>
    <updated>2016-11-25T14:23:52.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在多表查询中使用Group-by"><a href="#在多表查询中使用Group-by" class="headerlink" title="在多表查询中使用Group by"></a>在多表查询中使用Group by</h2><blockquote>
<p>有三张表，一张是部门表-dept，一张是餐厅表-dinner，还有一张是员工消费明细表-cost(<strong>含餐厅、部门外键</strong>)<br>现在需要一张报表，需求如下:</p>
<table>
<thead>
<tr>
<th>部门名称</th>
<th>餐厅名称</th>
<th>消费总次数</th>
<th>消费总金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>部门1</td>
<td>餐厅1</td>
<td>2000</td>
<td>20000</td>
</tr>
<tr>
<td>部门1</td>
<td>餐厅2</td>
<td>2000</td>
<td>20000</td>
</tr>
<tr>
<td>部门2</td>
<td>餐厅1</td>
<td>2000</td>
<td>20000</td>
</tr>
</tbody>
</table>
</blockquote>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dept.deptname,dinner.name,cost1.countsum,cost2.money <span class="keyword">from</span> <span class="keyword">cost</span> <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> dining_id,dept_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> countsum <span class="keyword">from</span>  <span class="keyword">cost</span> <span class="keyword">group</span> <span class="keyword">by</span> dining_id,dept_id) <span class="keyword">as</span> c1 <span class="keyword">on</span> c1.dining_id = c.dining_id <span class="keyword">and</span> c1.dept_id=c.dept_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> dining_id,dept_id,<span class="keyword">sum</span>(money) <span class="keyword">as</span> money <span class="keyword">from</span>  <span class="keyword">cost</span> <span class="keyword">group</span> <span class="keyword">by</span> dining_id,dept_id) <span class="keyword">as</span> c2 <span class="keyword">on</span> c2.dining_id = c.dining_id <span class="keyword">and</span> c2.dept_id=ic.dept_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dinner <span class="keyword">as</span> d <span class="keyword">on</span> d.id= c.dining_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">as</span> dept <span class="keyword">on</span> dept.deptid= c.dept_id ;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<blockquote>
<p>当使用<code>group by</code>时，<code>select</code> 指定的字段要么作为分组<br>分组依据，写在<code>group by</code> 后边，要吗已经被包含在聚合函数中。<br>如果不是这两种情况的话会跳出错误：</p>
<p><em>选择列表中的列 ‘xxx’ 无效，因为该列没有包含在聚合函数或 GROUP BY 子句中。</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在多表查询中使用Group-by&quot;&gt;&lt;a href=&quot;#在多表查询中使用Group-by&quot; class=&quot;headerlink&quot; title=&quot;在多表查询中使用Group by&quot;&gt;&lt;/a&gt;在多表查询中使用Group by&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有三张表，一张是部门表-dept，一张是餐厅表-dinner，还有一张是员工消费明细表-cost(&lt;strong&gt;含餐厅、部门外键&lt;/strong&gt;)&lt;br&gt;现在需要一张报表，需求如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;部门名称&lt;/th&gt;
&lt;th&gt;餐厅名称&lt;/th&gt;
&lt;th&gt;消费总次数&lt;/th&gt;
&lt;th&gt;消费总金额&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;部门1&lt;/td&gt;
&lt;td&gt;餐厅1&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;20000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;部门1&lt;/td&gt;
&lt;td&gt;餐厅2&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;20000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;部门2&lt;/td&gt;
&lt;td&gt;餐厅1&lt;/td&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;20000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://amoyiki.com/categories/SQL/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux注意事项</title>
    <link href="http://amoyiki.com/2016/05/10/Linux%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://amoyiki.com/2016/05/10/Linux注意事项/</id>
    <published>2016-05-10T03:41:57.000Z</published>
    <updated>2016-12-06T12:40:08.336Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>下载、解压、执行 <code>make</code> <code>make install</code> <code>wget</code> 等命令需要在命令前加上<code>sudo</code>(<strong>PS：最好所有命令都加上</strong>)</li>
<li><p>解压与压缩命令</p>
<p> 解压命令：</p>
<ul>
<li><code>tar</code> <code>-zxvf</code> *.tar.gz</li>
<li><code>tar</code> <code>-xvf</code> *.tar</li>
<li><code>unrar</code> e *.rar</li>
<li><p><code>unzip</code> *.zip</p>
<p>压缩命令：</p>
</li>
<li><p>tar -cf all.tar *.jpg # -c新的包，f文件名</p>
</li>
<li><p>tar -rf all.tar *.gif # -r新增加</p>
<p>列出all中所有文件</p>
</li>
<li><p>tar -tf all.tar </p>
</li>
</ul>
</li>
<li><p>切换命令/图形界面</p>
 <a id="more"></a>
<p> 切换成命令界面（暂时）</p>
<p> <code>Ctrl+Alt+空格</code> <code>Ctrl+Alt+F1~F6</code></p>
<p> 切换成命令模式（永久）</p>
<blockquote>
<p>$&gt;echo “false” | sudo tee /etc/X11/default-display-manager</p>
</blockquote>
<p> 然后重启Ubuntu</p>
<p> 切换成图形界面（暂时）</p>
<blockquote>
<p>startx</p>
</blockquote>
<p> 切换成图形界面（永久）</p>
<blockquote>
<p>$&gt;echo “/usr/sbin/gdm” | sudo tee /etc/X11/default-display-manager</p>
</blockquote>
</li>
<li><p>Linux 软件安装步骤</p>
<ol>
<li>加载配置 <code>sudo ./configure</code> <strong>注意：</strong>  在此命令后面添加<code>--prefix=...</code>可以指定安装路径，例如<code>sudo ./configure --prefix=/usr/local/python</code></li>
<li>编译 <code>sudo make</code></li>
<li>安装 <code>sudo make install</code></li>
</ol>
</li>
<li>Linux 清屏命令<ul>
<li><code>$ clear</code> 保留历史记录，将页面下翻一页而已</li>
<li><code>$ reset</code> 真正意义上的清空界面</li>
</ul>
</li>
<li><p>Linux 更改计算机名</p>
<blockquote>
<p>$ sudo vim /etc/hostname<br>将第一行改为你想要的名字</p>
</blockquote>
</li>
<li><p>Ubuntu apt-get update失败</p>
<blockquote>
<p>E: Could not get lock /var/lib/apt/lists/lock<br>E: Could not get lock /var/lib/dpkg/lock<br>将这两个文件删除即可执行update命令</p>
</blockquote>
</li>
<li><p>中断命令执行</p>
<blockquote>
<p>有时候命令执行到一半发现执行错误，或者命令执行时卡死。需要执行中断命令<br><code>Ctrl + z</code></p>
</blockquote>
</li>
<li><p>创建文件夹或文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir aa <span class="comment"># 创建aa文件夹</span></span><br><span class="line">$&gt; touch aa.log <span class="comment"># 创建aa.log文件(0字节)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux 查看进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; ps -ef | grep nginx </span><br><span class="line"><span class="comment">#nobody    4554  4553  0 15:50 ?        00:00:00 nginx: worker process </span></span><br><span class="line">$&gt; ps <span class="_">-e</span> | grep nginx </span><br><span class="line"><span class="comment">#4553 ?        00:00:00 nginx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux 关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>开机自启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo vi /etc/rc.local</span><br><span class="line"><span class="comment"># 在 exit 0 前添加所需自启动服务</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装ssh服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;下载、解压、执行 &lt;code&gt;make&lt;/code&gt; &lt;code&gt;make install&lt;/code&gt; &lt;code&gt;wget&lt;/code&gt; 等命令需要在命令前加上&lt;code&gt;sudo&lt;/code&gt;(&lt;strong&gt;PS：最好所有命令都加上&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压与压缩命令&lt;/p&gt;
&lt;p&gt; 解压命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tar&lt;/code&gt; &lt;code&gt;-zxvf&lt;/code&gt; *.tar.gz&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar&lt;/code&gt; &lt;code&gt;-xvf&lt;/code&gt; *.tar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unrar&lt;/code&gt; e *.rar&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;unzip&lt;/code&gt; *.zip&lt;/p&gt;
&lt;p&gt;压缩命令：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tar -cf all.tar *.jpg # -c新的包，f文件名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tar -rf all.tar *.gif # -r新增加&lt;/p&gt;
&lt;p&gt;列出all中所有文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tar -tf all.tar &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切换命令/图形界面&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://amoyiki.com/categories/Linux/"/>
    
    
      <category term="学习" scheme="http://amoyiki.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>windows 下使用Virtualenv 管理Python项目</title>
    <link href="http://amoyiki.com/2016/05/09/windows-%E4%B8%8B%E4%BD%BF%E7%94%A8Virtualenv-%E7%AE%A1%E7%90%86Python%E9%A1%B9%E7%9B%AE/"/>
    <id>http://amoyiki.com/2016/05/09/windows-下使用Virtualenv-管理Python项目/</id>
    <published>2016-05-09T14:57:21.000Z</published>
    <updated>2016-11-25T14:23:52.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么使用virtualenv"><a href="#为什么使用virtualenv" class="headerlink" title="为什么使用virtualenv"></a>为什么使用virtualenv</h3><p>我们在使用python时可能会遇到在一台电脑同时装不同的版本Python或者装不同版本的第三方依赖。<br>这时候就可以用virtualenv来隔绝项目之间第三方依赖。<br>此外，virtualenv还可以把开发环境打包。一键部署到其他地方。</p>
<h2 id="windows-环境安装virtualenv"><a href="#windows-环境安装virtualenv" class="headerlink" title="windows 环境安装virtualenv"></a>windows 环境安装virtualenv</h2><p><strong>先决条件：</strong></p>
<ol>
<li>已经安装Python</li>
<li>已经安装pip或easy_install<a id="more"></a>
<h3 id="安装virtual"><a href="#安装virtual" class="headerlink" title="安装virtual"></a>安装virtual</h3>（假定按在D:\env文件夹下）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\env&gt; pip install virtualenv</span><br><span class="line">D:\env&gt; pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="创建一个虚拟环境"><a href="#创建一个虚拟环境" class="headerlink" title="创建一个虚拟环境"></a>创建一个虚拟环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\env&gt; mkvirtualenv env</span><br><span class="line">New python executable <span class="keyword">in</span> D:\workspace\env1\Scripts\python.exe</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure>
<p>创建完成后我们可以使用<code>lsvirtualenv</code>查看已经创建的虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\env&gt;lsvirtualenv</span><br><span class="line"></span><br><span class="line">dir /b /ad <span class="string">"D:\env"</span></span><br><span class="line">========================================</span><br><span class="line">env</span><br></pre></td></tr></table></figure>
<p>可以利用<code>workon 虚拟环境名字</code>来切环境</p>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><ol>
<li>激活虚拟环境 <code>workon env</code></li>
<li>退出虚拟环境<code>deactivate</code></li>
<li>查看当前虚拟环境安装的所有软件包<code>pip list</code></li>
</ol>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>那么，愉快的用pip去装各种各样的依赖包吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么使用virtualenv&quot;&gt;&lt;a href=&quot;#为什么使用virtualenv&quot; class=&quot;headerlink&quot; title=&quot;为什么使用virtualenv&quot;&gt;&lt;/a&gt;为什么使用virtualenv&lt;/h3&gt;&lt;p&gt;我们在使用python时可能会遇到在一台电脑同时装不同的版本Python或者装不同版本的第三方依赖。&lt;br&gt;这时候就可以用virtualenv来隔绝项目之间第三方依赖。&lt;br&gt;此外，virtualenv还可以把开发环境打包。一键部署到其他地方。&lt;/p&gt;
&lt;h2 id=&quot;windows-环境安装virtualenv&quot;&gt;&lt;a href=&quot;#windows-环境安装virtualenv&quot; class=&quot;headerlink&quot; title=&quot;windows 环境安装virtualenv&quot;&gt;&lt;/a&gt;windows 环境安装virtualenv&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;先决条件：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已经安装Python&lt;/li&gt;
&lt;li&gt;已经安装pip或easy_install
    
    </summary>
    
      <category term="工具配置" scheme="http://amoyiki.com/categories/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Virtualenv" scheme="http://amoyiki.com/tags/Virtualenv/"/>
    
      <category term="Python" scheme="http://amoyiki.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="http://amoyiki.com/2016/05/01/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://amoyiki.com/2016/05/01/新的开始/</id>
    <published>2016-05-01T02:59:47.000Z</published>
    <updated>2017-01-29T09:01:02.131Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新的开始，建立在曾经的废墟之上"><a href="#新的开始，建立在曾经的废墟之上" class="headerlink" title="新的开始，建立在曾经的废墟之上"></a>新的开始，建立在曾经的废墟之上</h2><p>说来也是怪我自己脑子太二，在之前笔记本电脑内的Blog源文件没有备份就将电脑重装系统，结果就是之前的所有文章都消失得一干二净，虽然不是什么重要的文章，但毕竟是自己花心思写下的经验，丢了还是觉得蛮可惜的。所以这一次，我老老实实在GitHub上新开一个repository放我的hexo文件。以后每写一篇文章，就都要把源文件上传一次，妈妈再也不用担心换电脑没法继续写Blog了，顺带还能熟悉一些git命令，岂不美哉。<br><a id="more"></a></p>
<h3 id="既然开了一篇杂谈，那我就再说说找工作的事吧"><a href="#既然开了一篇杂谈，那我就再说说找工作的事吧" class="headerlink" title="既然开了一篇杂谈，那我就再说说找工作的事吧"></a>既然开了一篇杂谈，那我就再说说找工作的事吧</h3><p>虽然没人看，但是我还是记录一下大四找工作的一些经历和体会，以后回顾的时候也能在心里啐一句：<code>当初怎么跟个傻子似的</code>。</p>
<p>想开始找工作是在大四上的时候，虽然那个时候周围的同学都还在重复过着悠闲自在的大学生活，但是我比较杞人忧天，或许是在知乎逛多了，感觉其他大学生都屌的不行，而我以前也从未有过去实习的经历，如果还不趁着秋招公司多，到毕业时想找恐怕就难了。<br>开始写简历的时候才发现，自己这四年来好像没什么好写的，一来学习成绩不怎么样，再来自己也没有参与过什么软件项目的开发，简直就只能白纸一张。想了好几个晚上，把自己大三开始所有写过的代码捋了一遍，挑了三个称的上开发的项目，然后一顿瞎掰开发过程。总算勉勉强强凑成了一页。<br>接下来就是不断的参加校招，不断的递简历，不断的参加笔试面试。<br>参加了几个比较有名的公司的校招，有的递完简历就了无音讯，有的参加完笔试就知道没机会了。不过在不断失败中，我还是攒到了一些经验，会针对面试公司可能出的问题进行复习。<br>功夫不负有心人，虽然大公司一家都没有消息，不过海投中的一些小公司还是有给我回信。陆陆续续的面试了好几个公司，从一开始自我介绍就会声音就会发抖，到后面稍微从容的跟面试官聊一聊人生。这样的进步我觉得比我拿到offer更值得高兴。<br>然后，我也收到了五个左右的offer，包括初创，电商，软件等公司，虽然大家都说在初创公司会得到很好的锻炼，但是我对自身技术水平还是不自信，怕到了初创公司会处于拖后腿的地位，考虑了很久，选择了一件面向企业的软件公司。<br>工作了差不多4月，现在我也慢慢进入了社会人的角色。现在这个公司工作量不算太大，给的工资也说的过去。不过，工作内容不是自己期待中呢那样。所以，我开始思考一年以后，我该何去何从。</p>
<h3 id="对未来的展望"><a href="#对未来的展望" class="headerlink" title="对未来的展望"></a>对未来的展望</h3><p>说完当下现状，就该想想以后的发展目标了。现在这个公司实在太过安逸了，每天要么处理客户问题，要么做一些重复的软件二次开发，要么就发发呆。这样让我开始担忧我的技术水平能不能在这一年有所提高，还是会比在学校更糟糕，每天下班回来基本不会再看技术书，不会在家里写一行代码。而且岗位本身就不是一个单纯的开发岗位，更像一个售后技术人员和软件定制开发人员的结合。公司同个技术小组同事虽然都很好，但是没有技术的交流，没有共同开发，大家各干各的活，这点让我很是失望。<br>所以，我开始考虑明年跳槽，下一份工作，我决定去上海发展，在我们这个二流城市，互联网公司还是太少。机会感觉也不多。所以想去上海看看会不会有更多的机会。<br>同时，我开始了前期的准备工作。现在做的python开发，之前在学校学的java基本上也忘了差不多，而python我也没有很深的了解，这个状态肯定无法跳槽。所以，我开始重新捡起书籍，为明年而奋斗！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新的开始，建立在曾经的废墟之上&quot;&gt;&lt;a href=&quot;#新的开始，建立在曾经的废墟之上&quot; class=&quot;headerlink&quot; title=&quot;新的开始，建立在曾经的废墟之上&quot;&gt;&lt;/a&gt;新的开始，建立在曾经的废墟之上&lt;/h2&gt;&lt;p&gt;说来也是怪我自己脑子太二，在之前笔记本电脑内的Blog源文件没有备份就将电脑重装系统，结果就是之前的所有文章都消失得一干二净，虽然不是什么重要的文章，但毕竟是自己花心思写下的经验，丢了还是觉得蛮可惜的。所以这一次，我老老实实在GitHub上新开一个repository放我的hexo文件。以后每写一篇文章，就都要把源文件上传一次，妈妈再也不用担心换电脑没法继续写Blog了，顺带还能熟悉一些git命令，岂不美哉。&lt;br&gt;
    
    </summary>
    
      <category term="半畳" scheme="http://amoyiki.com/categories/%E5%8D%8A%E7%95%B3/"/>
    
    
      <category term="杂谈" scheme="http://amoyiki.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
